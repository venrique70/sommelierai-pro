--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "ES2021"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "noImplicitAny": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "firebase-admin": ["./src/shims/firebase-admin"],
      "firebase-admin/*": ["./node_modules/firebase-admin/*"]
    },
    "plugins": [{ "name": "next" }]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\tsconfig.json

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\firestore.rules
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\firestore.rules

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  async redirects() {
    return [
      {
        source: "/privacy-policy",
        destination: "/legal#privacidad",
        permanent: true,
      },
      {
        source: "/privacy",
        destination: "/legal#privacidad",
        permanent: true,
      },
      {
        source: "/terms",
        destination: "/legal#terminos",
        permanent: true,
      },
    ];
  },
};

module.exports = nextConfig;

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\next.config.js

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\lib\firebase.ts
// src/lib/firebase.ts
// Inicialización CLIENTE (web) con SDK modular v9

import { initializeApp, getApps, getApp, type FirebaseApp } from "firebase/app";
import { getAuth, GoogleAuthProvider, type Auth } from "firebase/auth";
import { getFirestore, type Firestore } from "firebase/firestore";
import { getStorage, type FirebaseStorage } from "firebase/storage";

// ⚠️ Usa SIEMPRE las variables NEXT_PUBLIC_* en cliente
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY!,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN!,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID!,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET!,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID!,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID!,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
};

let app: FirebaseApp;
if (!getApps().length) {
  app = initializeApp(firebaseConfig);
} else {
  app = getApp();
}

// Exporta SDKs MODULARES (no usar compat, no usar app.firestore())
export const auth: Auth = getAuth(app);
export const db: Firestore = getFirestore(app);
export const storage: FirebaseStorage = getStorage(app);
export const googleProvider = new GoogleAuthProvider();

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\lib\firebase.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\lib\firebase-admin.ts
// src/lib/firebase-admin.ts
import { App, cert, getApps, getApp, initializeApp } from "firebase-admin/app";
import { getFirestore, Firestore } from "firebase-admin/firestore";

// ⚠️ Asegúrate de NO poner "use server" en este archivo.

function getOrInitAdminApp(): App {
  if (!getApps().length) {
    // La variable debe ser el JSON completo del service account (stringificado)
    const saRaw = process.env.FIREBASE_SERVICE_ACCOUNT_KEY;
    if (!saRaw) {
      throw new Error("FIREBASE_SERVICE_ACCOUNT_KEY no está definido");
    }

    // Admite tanto string JSON como objeto ya parseado
    const sa = typeof saRaw === "string" ? JSON.parse(saRaw) : saRaw;

    return initializeApp({
      credential: cert(sa as any),
    });
  }
  return getApp();
}

/** Devuelve una instancia de Firestore Admin (singleton). */
export function adminDb(): Firestore {
  return getFirestore(getOrInitAdminApp());
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\lib\firebase-admin.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\lib\auth.ts
"use client";

import { db, auth } from "@/lib/firebase-client";
import {
  GoogleAuthProvider,
  signInWithPopup,
  signOut,
  onAuthStateChanged,
  sendPasswordResetEmail,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  updateProfile,
  setPersistence,
  browserLocalPersistence,
  type User,
} from "firebase/auth";
import {
  doc, setDoc, getDoc, serverTimestamp, increment, updateDoc,
} from "firebase/firestore";
import type { AppRouterInstance } from "next/dist/shared/lib/app-router-context.shared-runtime";

const provider = new GoogleAuthProvider();

const planLimits = {
  descubrete: { analyzeWine: 5, recommendWine: 1, pairDinner: 0 },
  iniciado: { analyzeWine: 8, recommendWine: 2, pairDinner: 0 },
  "una copa": { analyzeWine: 12, recommendWine: 5, pairDinner: 2 },
  "copa premium": { analyzeWine: 30, recommendWine: 15, pairDinner: 10 },
  sibarita: { analyzeWine: Infinity, recommendWine: Infinity, pairDinner: Infinity },
};
type PlanName = keyof typeof planLimits;

export function humanizeAuthError(code?: string, fallback?: string) {
  const map: Record<string, string> = {
    "auth/invalid-credential": "Correo o contraseña incorrectos.",
    "auth/user-not-found": "No existe una cuenta con ese correo.",
    "auth/wrong-password": "Contraseña incorrecta.",
    "auth/too-many-requests": "Demasiados intentos. Intenta más tarde.",
    "auth/operation-not-allowed": "El método Email/Contraseña no está habilitado.",
    "auth/network-request-failed": "Problema de red. Verifica tu conexión.",
    "auth/invalid-email": "Introduce un correo válido.",
  };
  return map[code ?? ""] ?? (fallback || "No se pudo iniciar sesión.");
}

export const setupUserProfile = async (user: User, displayName?: string | null) => {
  const userRef = doc(db, "users", user.uid);
  const snap = await getDoc(userRef);
  const isAdmin = user.email === "venrique70@gmail.com";
  if (!snap.exists()) {
    const renewalDate = new Date(); renewalDate.setMonth(renewalDate.getMonth() + 1);
    const initialPlanKey: PlanName = isAdmin ? "sibarita" : "descubrete";
    const planName = initialPlanKey.charAt(0).toUpperCase() + initialPlanKey.slice(1).replace("_"," ");
    const limits = planLimits[initialPlanKey];
    await setDoc(userRef, {
      uid: user.uid,
      email: user.email,
      displayName: displayName || user.displayName || user.email?.split("@")[0] || "Usuario",
      photoURL: user.photoURL || "",
      role: isAdmin ? "admin" : "user",
      vendorRequestStatus: "pending",
      lemonAffiliateLink: null,
      level: isAdmin ? "Master" : "Nuevo",
      subscription: { plan: planName, status: "active", renewalDate },
      usage: {
        analyzeWine: { current: 0, limit: limits.analyzeWine },
        recommendWine: { current: 0, limit: limits.recommendWine },
        pairDinner: { current: 0, limit: limits.pairDinner },
      },
      createdAt: serverTimestamp(),
    });
  }
};

export async function signInWithEmail(email: string, password: string) {
  try {
    await setPersistence(auth, browserLocalPersistence); // sesión estable
    const { user } = await signInWithEmailAndPassword(auth, email, password);
    return user;
  } catch (e: any) {
    throw Object.assign(new Error(humanizeAuthError(e?.code, e?.message)), { code: e?.code });
  }
}

export async function signUpWithEmail(email: string, password: string, displayName?: string) {
  try {
    await setPersistence(auth, browserLocalPersistence);
    const res = await createUserWithEmailAndPassword(auth, email, password);
    if (displayName) await updateProfile(res.user, { displayName });
    await setupUserProfile(res.user, displayName);
    return res.user;
  } catch (e: any) {
    throw Object.assign(new Error(humanizeAuthError(e?.code, e?.message)), { code: e?.code });
  }
}

export async function signInWithGoogle() {
  try {
    await setPersistence(auth, browserLocalPersistence);
    const res = await signInWithPopup(auth, provider);
    await setupUserProfile(res.user);
    return res.user;
  } catch (e: any) {
    throw Object.assign(new Error(humanizeAuthError(e?.code, e?.message)), { code: e?.code });
  }
}

export async function logout(router?: AppRouterInstance) {
  await signOut(auth);
  if (router) router.push("/login"); else window.location.href = "/login";
}
export async function sendPasswordReset(email: string) { return sendPasswordResetEmail(auth, email); }
export function onAuthChange(cb: (user: User | null) => void) { return onAuthStateChanged(auth, cb); }

export async function updateUserUsage(uid: string, feature: "analyzeWine" | "recommendWine" | "pairDinner") {
  if (!uid) return;
  const ref = doc(db, "users", uid);
  try { await updateDoc(ref, { [`usage.${feature}.current`]: increment(1) }); } catch {}
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\lib\auth.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\hooks\use-auth.tsx
"use client";

import { useState, useEffect, createContext, useContext, ReactNode } from 'react';
import { onAuthStateChanged, User } from 'firebase/auth';
import { auth, db } from '@/lib/firebase';
import { doc, onSnapshot } from "firebase/firestore";
import { setupUserProfile } from '@/lib/auth';

export interface UserProfile {
  uid: string;
  email: string;
  displayName: string;
  photoURL: string;
  role: 'admin' | 'vendedor' | 'user';
  vendorRequestStatus?: 'pending' | 'approved' | 'rejected' | null | undefined;
  subscription: {
    plan: string;
    status: string;
    renewalDate: { seconds: number; nanoseconds: number; };
  };
  usage: {
    analyzeWine: { current: number; limit: number };
    recommendWine: { current: number; limit: number };
    pairDinner: { current: number; limit: number };
  };
  createdAt: any;
  vendorRequestedAt?: any;
}

interface AuthContextType {
  user: User | null;
  profile: UserProfile | null;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  profile: null,
  loading: true,
});

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const unsubscribeAuth = onAuthStateChanged(auth, (authUser) => {
      setUser(authUser);

      // 📌 Log para verificar UID de sesión
      console.log("AUTH UID:", authUser?.uid);

      // 🔒 Evita consultas a Firestore si no hay usuario autenticado
      if (!authUser?.uid) {
        setProfile(null);
        setLoading(false);
        return;
      }

      const profileRef = doc(db, 'users', authUser.uid);
      const unsubscribeProfile = onSnapshot(
        profileRef,
        async (docSnap) => {
          if (docSnap.exists()) {
            setProfile(docSnap.data() as UserProfile);
            setLoading(false);
          } else {
            // Perfil no existe, crearlo
            setLoading(true);
            try {
              await setupUserProfile(authUser);
              // onSnapshot se volverá a disparar después de crear el perfil
            } catch (err) {
              console.error("Error setting up user profile:", err);
              setProfile(null);
              setLoading(false);
            }
          }
        },
        (error) => {
          console.error("Error fetching user profile:", error);
          setProfile(null);
          setLoading(false);
        }
      );

      return () => unsubscribeProfile();
    });

    return () => unsubscribeAuth();
  }, []);

  const value = { user, profile, loading };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\hooks\use-auth.tsx

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\lib\schemas.ts

import { z } from "zod";
import type { Language } from "./translations";

export const WineAnalysisClientSchema = z.object({
  uid: z.string(),
  wineName: z.string().min(2, { message: "El nombre del vino debe tener al menos 2 caracteres." }),
  year: z.coerce.number().min(1800, { message: "El año debe ser válido." }).max(new Date().getFullYear() + 1, { message: "El año no puede ser en el futuro." }),
  grapeVariety: z.string().min(2, { message: "La cepa debe tener al menos 2 caracteres." }),
  wineryName: z.string().optional(),
  country: z.string().optional(),
  foodToPair: z.string().optional(),
  language: z.enum(['es', 'en']).optional(),
});


// --- Recomendación de vino por plato
export const RecommendWineSchema = z.object({
  dishDescription: z.string().min(10, { message: "La descripción del plato debe tener al menos 10 caracteres." }),
  country: z.string().min(2, { message: "Por favor, introduce un país válido." }),
  language: z.custom<Language>(),
});

export const RecommendWineByCountryInputSchema = RecommendWineSchema;

export const WineRecommendationSchema = z.object({
  wineName: z.string().describe("The full name of the recommended wine."),
  justificacionExperta: z.string().describe("The expert justification for the pairing, combining sensory analysis and pairing reasoning into a single, elegant paragraph."),
  rating: z.number().min(1).max(5).describe("A rating of the wine from 1 to 5."),
});

export const RecommendWineByCountryOutputSchema = z.array(WineRecommendationSchema);
export type RecommendWineByCountryOutput = z.infer<typeof RecommendWineByCountryOutputSchema>;



// --- Maridaje de cena completa

export const SommelierSuggestionSchema = z.object({
    wineName: z.string().describe("Nombre del vino sugerido"),
    analysis: z.object({
        visual: z.string().describe("Análisis visual del vino sugerido"),
        olfactory: z.string().describe("Análisis olfativo del vino sugerido"),
        gustatory: z.string().describe("Análisis gustativo del vino sugerido"),
    }).describe("Análisis sensorial completo del vino sugerido"),
    justification: z.string().describe("Explicación detallada de por qué esta sugerencia es superior"),
    rating: z.number().min(5).max(5).describe("La calificación para una sugerencia siempre debe ser 5")
});

export const EvaluationSchema = z.object({
  pairingDescription: z.string().describe("A summary of the user's pairing, e.g., 'Lomo Saltado con Malbec'"),
  rating: z.number().min(1).max(5).describe('A technical rating from 1 to 5 for the user\'s pairing.'),
  evaluation: z.string().describe('A detailed technical explanation of why the pairing received its rating.'),
  suggestionAvailable: z.boolean().describe("True if the rating is less than 4, indicating suggestions are available."),
  sommelierSuggestions: z.array(SommelierSuggestionSchema).optional().describe("An array of up to 3 superior, 5-star alternative wine suggestions. This should only be populated if the rating is less than 4."),
});


export const DinnerPairingSchema = z.object({
  country: z.string().min(2, { message: "Por favor, introduce el país para obtener mejores sugerencias." }),
  pairings: z.array(z.object({
    dish: z.string().min(1, "El plato no puede estar vacío."),
    wine: z.string().min(1, "El vino/licor no puede estar vacío."),
    description: z.string().min(1, "La cepa/descripción no puede estar vacía."),
  })).min(1, "Debes añadir al menos un maridaje.").max(6, "Puedes analizar un máximo de 6 maridajes."),
});

export const EvaluateDinnerPairingsInputSchema = DinnerPairingSchema.extend({
    language: z.custom<Language>(),
});

export const EvaluateDinnerPairingsOutputSchema = z.array(EvaluationSchema);
export type EvaluateDinnerPairingsOutput = z.infer<typeof EvaluateDinnerPairingsOutputSchema>;


// --- Hoja de cata (Análisis por descripción)
export const CataSheetSchema = z.object({
  descripcionVino: z.string().min(20, { message: "La descripción debe tener al menos 20 caracteres para un análisis significativo." }),
});

// --- Maridaje simple por plato
export const FoodPairingSchema = z.object({
  dishDescription: z.string().min(10, {
    message: "La descripción del plato debe tener al menos 10 caracteres.",
  }),
});

// --- Maridaje por tiempos de comida
export const CoursePairingSchema = z.object({
  entrada: z.string().min(5, { message: "Por favor, describe la entrada." }),
  primerPlato: z.string().min(5, { message: "Por favor, describe el primer plato." }),
  segundoPlato: z.string().min(5, { message: "Por favor, describe el segundo plato." }),
  tercerPlato: z.string().min(5, { message: "Por favor, describe el tercer plato." }),
  cuartoPlato: z.string().min(5, { message: "Por favor, describe el cuarto plato." }),
  postre: z.string().min(5, { message: "Por favor, describe el postre." }),
});

// --- MI BODEGA ---

// Schema para el formulario de cliente
export const WineInCellarClientSchema = z.object({
    name: z.string().min(2, { message: "El nombre debe tener al menos 2 caracteres." }),
    variety: z.string().min(2, { message: "La variedad debe tener al menos 2 caracteres." }),
    year: z.coerce.number().min(1800, { message: "El año debe ser válido." }).max(new Date().getFullYear() + 1, { message: "El año no puede ser en el futuro." }),
    quantity: z.coerce.number().min(1, { message: "La cantidad debe ser al menos 1." }),
    status: z.enum(["Listo para Beber", "Necesita Guarda", "En su punto"]).default("Listo para Beber"),
});
export type WineInCellarFormValues = z.infer<typeof WineInCellarClientSchema>;

// Schema que representa un vino en la BD (incluye ID)
export const WineInCellarSchema = WineInCellarClientSchema.extend({
    id: z.string(),
    dateAdded: z.string(),
});
export type WineInCellar = z.infer<typeof WineInCellarSchema>;


// --- AÑADIR VINO ---
export const AddWineToCellarServerSchema = WineInCellarClientSchema.extend({
  uid: z.string(),
});
export type AddWineToCellarInput = z.infer<typeof AddWineToCellarServerSchema>;

export const AddWineToCellarOutputSchema = z.object({
  success: z.boolean(),
  wineId: z.string().optional(),
  wine: WineInCellarSchema.optional(),
  error: z.string().optional(),
});
export type AddWineToCellarOutput = z.infer<typeof AddWineToCellarOutputSchema>;


// --- LISTAR VINOS ---
export const ListWinesFromCellarInputSchema = z.object({
  uid: z.string(),
});
export type ListWinesFromCellarInput = z.infer<typeof ListWinesFromCellarInputSchema>;

export const ListWinesFromCellarOutputSchema = z.object({
  wines: z.array(WineInCellarSchema).optional(),
  error: z.string().optional(),
  success: z.boolean().optional(),
});
export type ListWinesFromCellarOutput = z.infer<typeof ListWinesFromCellarOutputSchema>;


// --- ACTUALIZAR VINO ---
export const UpdateWineInCellarServerSchema = WineInCellarClientSchema.extend({
  uid: z.string(),
  wineId: z.string(),
});
export type UpdateWineInCellarInput = z.infer<typeof UpdateWineInCellarServerSchema>;

export const UpdateWineInCellarOutputSchema = z.object({
  success: z.boolean(),
  updatedWine: WineInCellarSchema.optional(),
  error: z.string().optional(),
});
export type UpdateWineInCellarOutput = z.infer<typeof UpdateWineInCellarOutputSchema>;


// --- ELIMINAR VINO ---
export const DeleteWineFromCellarInputSchema = z.object({
  uid: z.string(),
  wineId: z.string(),
});
export type DeleteWineFromCellarInput = z.infer<typeof DeleteWineFromCellarInputSchema>;

export const DeleteWineFromCellarOutputSchema = z.object({
  success: z.boolean(),
  error: z.string().optional(),
});
export type DeleteWineFromCellarOutput = z.infer<typeof DeleteWineFromCellarOutputSchema>;



// --- AFILIADOS ---

// Listar Vendedores (Admin)
export const ListVendedoresInputSchema = z.object({
  adminUid: z.string().describe('The UID of the user requesting the list, must be an admin.'),
});
export type ListVendedoresInput = z.infer<typeof ListVendedoresInputSchema>;

export const VendedorSchema = z.object({
  uid: z.string(),
  displayName: z.string(),
  email: z.string(),
  role: z.string(),
  activeReferrals: z.number(),
  totalCommission: z.number(),
});
export type Vendedor = z.infer<typeof VendedorSchema>;

export const ListVendedoresOutputSchema = z.object({
  vendedores: z.array(VendedorSchema).optional(),
  error: z.string().optional(),
});
export type ListVendedoresOutput = z.infer<typeof ListVendedoresOutputSchema>;

// Solicitar Rol de Vendedor (User)
export const RequestVendorRoleInputSchema = z.object({
  uid: z.string(),
});
export type RequestVendorRoleInput = z.infer<typeof RequestVendorRoleInputSchema>;

export const RequestVendorRoleOutputSchema = z.object({
  success: z.boolean(),
  message: z.string().optional(),
  error: z.string().optional(),
});
export type RequestVendorRoleOutput = z.infer<typeof RequestVendorRoleOutputSchema>;


// Listar Solicitudes de Vendedor (Admin)
export const ListVendorRequestsInputSchema = z.object({
  adminUid: z.string(),
});
export type ListVendorRequestsInput = z.infer<typeof ListVendorRequestsInputSchema>;

export const VendorRequestSchema = z.object({
  uid: z.string(),
  displayName: z.string(),
  email: z.string(),
  requestedAt: z.string(),
});
export type VendorRequest = z.infer<typeof VendorRequestSchema>;

export const ListVendorRequestsOutputSchema = z.object({
  requests: z.array(VendorRequestSchema).optional(),
  error: z.string().optional(),
});
export type ListVendorRequestsOutput = z.infer<typeof ListVendorRequestsOutputSchema>;


// Aprobar Solicitud de Vendedor (Admin)
export const ApproveVendorRequestInputSchema = z.object({
  adminUid: z.string(),
  uidToApprove: z.string(),
});
export type ApproveVendorRequestInput = z.infer<typeof ApproveVendorRequestInputSchema>;

export const ApproveVendorRequestOutputSchema = z.object({
  success: z.boolean(),
  message: z.string().optional(),
  error: z.string().optional(),
});
export type ApproveVendorRequestOutput = z.infer<typeof ApproveVendorRequestOutputSchema>;


// --- PLANES CORPORATIVOS ---

// Solicitar información (Cliente)
export const RequestCorporateInfoClientSchema = z.object({
  companyName: z.string().min(2, { message: "El nombre de la empresa es requerido." }),
  contactName: z.string().min(2, { message: "El nombre del contacto es requerido." }),
  contactEmail: z.string().email({ message: "Por favor, introduce un correo válido." }),
});
export type RequestCorporateInfoInput = z.infer<typeof RequestCorporateInfoClientSchema>;

export const RequestCorporateInfoOutputSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  error: z.string().optional(),
});
export type RequestCorporateInfoOutput = z.infer<typeof RequestCorporateInfoOutputSchema>;


// Obtener información (Cliente con código)
export const GetCorporateInfoInputSchema = z.object({
  accessCode: z.string().min(6, { message: "El código de acceso no es válido." }),
});
export type GetCorporateInfoInput = z.infer<typeof GetCorporateInfoInputSchema>;

// (El schema de salida de getCorporateInfo se definirá en el propio flujo ya que es estático)
export const CorporatePlanDataSchema = z.any();
export const GetCorporateInfoOutputSchema = z.object({
  success: z.boolean(),
  data: CorporatePlanDataSchema.optional(),
  error: z.string().optional(),
});
export type GetCorporateInfoOutput = z.infer<typeof GetCorporateInfoOutputSchema>;


// Listar Solicitudes Corporativas (Admin)
export const ListCorporateRequestsInputSchema = z.object({
  adminUid: z.string(),
});
export type ListCorporateRequestsInput = z.infer<typeof ListCorporateRequestsInputSchema>;

export const CorporateRequestSchema = z.object({
  id: z.string(),
  companyName: z.string(),
  contactName: z.string(),
  contactEmail: z.string(),
  accessCode: z.string(),
  requestedAt: z.string(),
});
export type CorporateRequest = z.infer<typeof CorporateRequestSchema>;

export const ListCorporateRequestsOutputSchema = z.object({
  requests: z.array(CorporateRequestSchema).optional(),
  error: z.string().optional(),
});
export type ListCorporateRequestsOutput = z.infer<typeof ListCorporateRequestsOutputSchema>;


// Registrar Venta Corporativa (Vendedor/Afiliado)
export const RegisterCorporateSaleSchema = z.object({
  vendedorUid: z.string(),
  accessCode: z.string().min(6, { message: "El código de acceso no es válido." }),
  plan: z.enum(['Copa Premium', 'Sibarita']),
  subscriptions: z.coerce.number().min(1, "Debe haber al menos una suscripción."),
  billingCycle: z.enum(['monthly', 'yearly']),
});
export type RegisterCorporateSaleInput = z.infer<typeof RegisterCorporateSaleSchema>;

export const RegisterCorporateSaleOutputSchema = z.object({
    success: z.boolean(),
    message: z.string().optional(),
    error: z.string().optional(),
});
export type RegisterCorporateSaleOutput = z.infer<typeof RegisterCorporateSaleOutputSchema>;

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\lib\schemas.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\genkit.ts

import { googleAI } from '@genkit-ai/googleai';
import { genkit } from 'genkit';

/**
 * Initializes and configures the Genkit AI instance.
 * This is the central point for setting up plugins and other Genkit configurations.
 */

// Initialize Genkit with the Google AI plugin.
// This configuration explicitly forces the use of an API key from environment variables.
// Using GEMINI_API_KEY is the standard for server-side environments.
export const ai = genkit({
  plugins: [
    googleAI({
      apiKey: process.env.GEMINI_API_KEY,
    }),
  ],
});

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\genkit.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\lib\actions\wine-analysis.ts


    

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\lib\actions\wine-analysis.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\analyze-wine.ts

'use server';

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { WineAnalysisClientSchema } from '@/lib/schemas';
import type { WineAnalysis } from '@/types';
import { getFirebaseAdminApp } from '@/lib/firebase-admin';
import * as admin from 'firebase-admin';

// This file contains the internal logic for the wine analysis.
// It is NOT directly called by the client. It is called by the Server Action in actions.ts.

const AiResponseSchema = z.object({
  isAiGenerated: z.boolean().describe("Set to true ONLY if you cannot find the specific wine and have to analyze a similar one."),
  wineName: z.string().describe("The full, corrected name of the wine."),
  year: z.number().describe("The specific vintage year."),
  country: z.string().optional().describe("The country of origin. If the user does not provide it, you MUST research and provide it if the wine is known."),
  wineryName: z.string().optional().describe("The name of the winery. If the user does not provide it, you MUST research and provide it if the wine is known."),
  notes: z.string().describe("Your final expert opinion and conclusion. Comment on the wine's typicity, style, aging potential, and origin country. Maintain a warm, technical, and mentoring tone. This is your personal seal."),
  corrections: z.array(z.object({
    field: z.enum(['Vino', 'Año', 'Cepa', 'Bodega', 'País', 'Wine', 'Year', 'Grape', 'Winery', 'Country']),
    original: z.string(),
    corrected: z.string(),
  })).optional().describe("A list of corrections made to the user's input. ONLY report a correction if the user provided a non-empty value that was wrong. Do NOT report a correction if you are filling in a field the user left blank."),
  pairingRating: z.number().min(1).max(5).optional().describe("If foodToPair was provided, a rating from 1 to 5 for the pairing. Otherwise, null."),
  pairingNotes: z.string().optional().describe("If foodToPair was provided, detailed notes explaining the pairing rating. Otherwise, null."),
  analysis: z.object({
    grapeVariety: z.string().describe("Crucial. The grape variety or a detailed blend composition (e.g., 'Cabernet Franc 77%, Cabernet Sauvignon 23%'). For blends, this is mandatory."),
    wineryLocation: z.string().optional().describe("The specific location/region of the winery (e.g., 'La Seca, Valladolid, España'). You MUST research and provide this if available."),
    visual: z.object({
      description: z.string().describe("A rich, evocative visual description. Detail the color, hue, and reflections. Comment on the clarity (limpidity) and brightness. Describe the density of the legs (tears) and what it implies about the wine's body and alcohol content."),
    }).describe("Visual analysis of the wine."),
    olfactory: z.object({
      description: z.string().describe("A complex olfactory analysis. Differentiate clearly between primary (fruit, floral), secondary (from fermentation/aging, e.g., vanilla, toast, butter), and tertiary (from evolution, e.g., leather, tobacco) aromas. Comment on the aromatic intensity and complexity."),
    }).describe("Olfactory analysis of the wine."),
    gustatory: z.object({
      description: z.string().describe("A thorough gustatory description. Describe the attack (initial impression), the evolution on the palate, and the finish. Detail the acidity, alcohol, body, and tannin structure. Explain how these elements are balanced and what the texture feels like (e.g., silky, astringent)."),
    }).describe("Gustatory analysis of the wine."),
    body: z.string().describe("Description of the wine's body."),
    finalSensations: z.string().describe("Description of the final sensations of the wine."),
    recommendedPairings: z.string().describe("Ideal food pairings for the wine, formatted as a numbered list with justifications."),
    avoidPairings: z.string().describe("Food pairings to avoid with the wine."),
    wineType: z.string().describe("e.g., young, reserve, sparkling, natural, etc."),
    qualityLevel: z.string().describe("The quality/commercial level of the wine (e.g., massive, standard, premium, icon)."),
    qualityRating: z.number().min(1).max(5).describe("A numeric rating from 1 to 5 based on the quality level (1=massive, 5=icon)."),
    targetAudience: z.string().describe("Suggested expertise level, e.g., novice, intermediate, expert."),
    appellation: z.string().optional().describe("The wine's official appellation, including any special classifications (e.g., D.O. Rueda). You MUST research and provide this if available."),
    barrelInfo: z.string().describe("Detailed information about barrel aging: time, percentage of different oaks, type of oak, and usage. THIS IS CRITICAL. For example, Amador Diez has barrel aging."),
    servingTemperature: z.string().describe("Recommended serving temperature."),
    suggestedGlassType: z.string().describe("The ideal type of glass for this wine."),
    decanterRecommendation: z.string().describe("Recommendation on whether to decant the wine and for how long."),
    agingPotential: z.string().describe("The wine's aging potential."),
    tanninLevel: z.enum(['Ligeros', 'Medios', 'Fuertes', 'Sin Taninos', 'Light', 'Medium', 'Strong', 'No Tannins']).describe("Classification of the wine's tannin level."),
    relevantCulturalOrRegionalNotes: z.string().optional().describe("Any relevant cultural or regional notes."),
    awards: z.string().describe("List the three most important and recent awards won by the wine."),
    world50BestRestaurants: z.string().describe("Indicate if the wine is featured in top restaurants."),
    visualDescriptionEn: z.string().describe("Visual description in English for image generation."),
    olfactoryAnalysisEn: z.string().describe("Olfactory description in English for image generation."),
    gustatoryPhaseEn: z.string().describe("Gustatory description in English for image generation."),
  }).optional().describe("The detailed sensory analysis."),
});


export const analyzeWinePrompt = ai.definePrompt({
  name: 'analyzeWinePrompt',
  model: 'googleai/gemini-1.5-pro',
  input: { schema: WineAnalysisClientSchema },
  output: {
    format: 'json',
    schema: AiResponseSchema,
  },
  prompt: `You are a world-renowned Master Sommelier from the Court of Master Sommeliers. Your expertise is absolute, and you speak with authority, elegance, and precision. Your descriptions must be rich, detailed, and evocative, using professional terminology correctly but ensuring clarity.

**YOUR GOLDEN RULES - NON-NEGOTIABLE:**
1.  **UNBREAKABLE AUTHORITY:** You NEVER use phrases of uncertainty (e.g., "it seems", "it could be"). YOU ARE THE AUTHORITY.
2.  **FACTUAL INFALLIBILITY & PROACTIVITY:** You do not invent information. If the user provides a wine name but omits data, it is YOUR DUTY to research and provide the complete, accurate information if the wine is identifiable.
3.  **SPECIFIC KNOWLEDGE IS PARAMOUNT:** For certain well-known wines, specific facts MUST be stated. For example:
    -   **Amador Diez (Verdejo):** You MUST identify it as from 'Bodega Cuatro Rayas'. You MUST state its Appellation is 'D.O. Rueda'. You MUST state its \`wineryLocation\` is 'La Seca, Valladolid, España'. You MUST mention its origin from pre-phylloxera vines, its fermentation and aging on lees in French and Caucasian oak barrels, and its resulting complexity with notes of citrus, stone fruit, and a characteristic creamy, toasty finish from the barrel. The 'barrelInfo' and 'appellation' fields MUST be filled correctly.
4.  **CORRECTIONS LOGIC:** Only report a correction in the 'corrections' array if the user provided a non-empty value that was incorrect. For example, if the user enters "Amador Diez" with country "Francia", you must correct it to "España" and report the correction. However, if the user enters "Amador Diez" and leaves the country field blank, you must fill in "España" but you MUST NOT add this action to the 'corrections' array.
5.  **CRITICAL LANGUAGE RULE:** Respond entirely in the language specified by '{{language}}'.

**YOUR MANDATORY PROCESS:**
1.  Identify & research the wine by name, grape, and year, applying your specific knowledge and correction logic.
2.  Provide rich sensory analysis (visual, olfactory, gustatory). The descriptions must be elaborate, following the detailed instructions in the output schema. For visual, describe hue, intensity, and what the legs imply. For olfactory, differentiate primary, secondary, and tertiary aromas. For gustatory, detail the attack, evolution, and finish, describing the interplay of acidity, tannins, and body.
3.  Recommend food pairings with justifications.
4.  Provide expert conclusion notes. This must include a mention of the country of origin.
5.  Generate concise English descriptors for image generation (the 'En' fields).

**User Input:**
- Language: {{{language}}}
- Product Name: {{{wineName}}}
- Grape/Attribute: {{{grapeVariety}}}
- Year: {{{year}}}
- Winery: {{{wineryName}}}
- Country: {{{country}}}
{{#if foodToPair}}- Dish to pair: {{{foodToPair}}}{{/if}}`,
});

export async function saveAnalysisToHistory(uid: string, analysis: WineAnalysis): Promise<void> {
    if (!uid) {
        console.error("No UID provided, cannot save analysis to history.");
        return;
    }
    const adminApp = getFirebaseAdminApp();
    if (!adminApp) {
        console.error("Firebase Admin not initialized, cannot save analysis.");
        return;
    }
    try {
        const db = admin.firestore(adminApp);
        const analysisRecord = {
            ...analysis,
            userId: uid,
            createdAt: admin.firestore.FieldValue.serverTimestamp(),
        };
        await db.collection('wineAnalyses').add(analysisRecord);
        console.log(`Analysis for user ${uid} saved successfully.`);
    } catch (error) {
        console.error(`Error saving analysis to history for user ${uid}:`, error);
    }
}

export const analyzeWineFlow = async (userInput: z.infer<typeof WineAnalysisClientSchema>): Promise<WineAnalysis> => {

    const { output } = await analyzeWinePrompt(userInput);
    if (!output) {
      throw new Error('No structured output returned from AI.');
    }

    let result: WineAnalysis;

    const imageGenerationModel = 'googleai/gemini-2.0-flash-preview-image-generation';
    const imageGenerationConfig = { responseModalities: ['TEXT', 'IMAGE'] as const };

    if (!output.analysis) {
      result = {
        isAiGenerated: output.isAiGenerated,
        wineName: output.wineName,
        year: output.year,
        notes: output.notes,
        corrections: output.corrections,
      };
    } else {
      const analysisData = output.analysis;

      const imagePromises = [
        ai.generate({
          model: imageGenerationModel,
          prompt: `Hyper-realistic photo, a glass of wine. ${analysisData.visualDescriptionEn}. Studio lighting, neutral background.`,
          config: imageGenerationConfig,
        }),
        ai.generate({
          model: imageGenerationModel,
          prompt: `Abstract art, captures the essence of wine aromas. ${analysisData.olfactoryAnalysisEn}. No text, no glass.`,
          config: imageGenerationConfig,
        }),
        ai.generate({
          model: imageGenerationModel,
          prompt: `Abstract textured art, evokes the sensation of wine flavors. ${analysisData.gustatoryPhaseEn}. No text, no glass.`,
          config: imageGenerationConfig,
        }),
      ];

      let glassImagePromise: Promise<any> = Promise.resolve(null);
      if (analysisData.suggestedGlassType && !/n\/?a|no especificado|not specified/i.test(analysisData.suggestedGlassType)) {
        glassImagePromise = ai.generate({
          model: imageGenerationModel,
          prompt: `Professional product photo of an empty ${analysisData.suggestedGlassType} wine glass. White background, studio lighting.`,
          config: imageGenerationConfig,
        });
      }

      const [visualResult, olfactoryResult, gustatoryResult, glassResult] = await Promise.allSettled([...imagePromises, glassImagePromise]);

      const getUrl = (res: PromiseSettledResult<any>) =>
        res.status === 'fulfilled' && res.value?.media?.url ? res.value.media.url : undefined;

      result = {
        isAiGenerated: output.isAiGenerated,
        wineName: output.wineName,
        year: output.year,
        country: output.country,
        wineryName: output.wineryName,
        notes: output.notes,
        corrections: output.corrections,
        pairingRating: output.pairingRating,
        pairingNotes: output.pairingNotes,
        foodToPair: userInput.foodToPair,
        analysis: {
          ...analysisData,
          visual: { ...analysisData.visual, imageUrl: getUrl(visualResult) },
          olfactory: { ...analysisData.olfactory, imageUrl: getUrl(olfactoryResult) },
          gustatory: { ...analysisData.gustatory, imageUrl: getUrl(gustatoryResult) },
          suggestedGlassTypeImageUrl: getUrl(glassResult),
        },
      };
    }

    if(userInput.uid) {
      await saveAnalysisToHistory(userInput.uid, result);
    }

    return result;
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\analyze-wine.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\enrich-wine-details.ts

'use server';
/**
 * @fileOverview This file defines a Genkit flow for enriching wine details.
 * It takes a wine name and grape variety and returns a more detailed description.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

const EnrichWineDetailsInputSchema = z.object({
  wineName: z.string().describe('The name of the wine (brand and variety).'),
  grapeVariety: z.string().describe('The grape variety of the wine.'),
});
export type EnrichWineDetailsInput = z.infer<typeof EnrichWineDetailsInputSchema>;

const EnrichWineDetailsOutputSchema = z.object({
  description: z.string().describe('A detailed description of the wine, including its visual, olfactory, gustative characteristics, and structure.'),
  visual: z.object({
    description: z.string(),
    imageUrl: z.string().url().optional(),
  }),
  olfactory: z.object({
    description: z.string(),
    imageUrl: z.string().url().optional(),
  }),
  gustatory: z.object({
    description: z.string(),
    imageUrl: z.string().url().optional(),
  }),
});
export type EnrichWineDetailsOutput = z.infer<typeof EnrichWineDetailsOutputSchema>;

/**
 * Enriches wine details by generating descriptions and image URLs.
 * @param input The wine name and grape variety.
 * @returns A promise that resolves to the enriched wine details.
 */
export async function enrichWineDetails(input: EnrichWineDetailsInput): Promise<EnrichWineDetailsOutput> {
  return enrichWineDetailsFlow(input);
}

const enrichWineDetailsPrompt = ai.definePrompt({
  name: 'enrichWineDetailsPrompt',
  input: { schema: EnrichWineDetailsInputSchema },
  output: { schema: EnrichWineDetailsOutputSchema },
  prompt: `
You are a sommelier. Generate a detailed description for the following wine:
- Wine Name: {{{wineName}}}
- Grape Variety: {{{grapeVariety}}}

Provide a general description, as well as detailed visual, olfactory, and gustatory analyses.
For each of the visual, olfactory, and gustatory analyses, also provide a placeholder image URL: https://placehold.co/512x512.png
`,
});

const enrichWineDetailsFlow = ai.defineFlow(
  {
    name: 'enrichWineDetailsFlow',
    inputSchema: EnrichWineDetailsInputSchema,
    outputSchema: EnrichWineDetailsOutputSchema,
  },
  async (input) => {
    const { output } = await enrichWineDetailsPrompt(input);
    if (!output) {
      throw new Error('The AI did not generate a valid response.');
    }
    return output;
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\enrich-wine-details.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\recommend-wine-by-country.ts

'use server';
/**
 * @fileOverview This file defines a Genkit flow for recommending wines based on a dish and country.
 *
 * It takes a description of a dish and the user's country, and returns a list of
 * up to three suitable wine recommendations, complete with sensory analysis for each.
 */
import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { RecommendWineByCountryInputSchema, RecommendWineByCountryOutputSchema, type RecommendWineByCountryOutput } from '@/lib/schemas';


/**
 * Recommends wines for a dish, considering the user's country.
 * @param input The dish description and country.
 * @returns A promise that resolves to an array of wine recommendations.
 */
export async function recommendWineByCountry(input: z.infer<typeof RecommendWineByCountryInputSchema>): Promise<RecommendWineByCountryOutput> {
  return recommendWineByCountryFlow(input);
}


const recommendWineByCountryPrompt = ai.definePrompt({
  name: 'recommendWineByCountryPrompt',
  model: 'googleai/gemini-1.5-pro',
  input: { schema: RecommendWineByCountryInputSchema },
  output: {
    format: 'json',
    schema: RecommendWineByCountryOutputSchema,
  },
  prompt: `
You are a Master Sommelier. A user is eating the following dish: "{{dishDescription}}".
Your task is to recommend FIVE excellent wines that are commonly available in {{country}} to pair with this dish. They do not have to be from that country, just available there.

**CRITICAL INSTRUCTION:**
- The response MUST be entirely in the language specified by **{{language}}**.
- The first THREE recommendations must be 5-star rated wines.
- The next TWO recommendations must be 4-star rated wines.

For each recommendation, you must provide the following in a single JSON array:
- \`wineName\`: (string) The full name of the recommended wine.
- \`justificacionExperta\`: (string) A concise, elegant, and expert justification for the pairing. This should merge sensory notes of the wine with the reasons it pairs well with the dish. The justification MUST be in {{language}}.
- \`rating\`: (number) Your personal rating of the wine pairing on a scale of 1 to 5, following the critical instruction above.

Dish: {{dishDescription}}
Country: {{country}}
Language: {{language}}

Provide only the JSON array of exactly 5 items as your response.
`,
});


const recommendWineByCountryFlow = ai.defineFlow(
  {
    name: 'recommendWineByCountryFlow',
    inputSchema: RecommendWineByCountryInputSchema,
    outputSchema: RecommendWineByCountryOutputSchema,
  },
  async (input) => {
    const { output } = await recommendWineByCountryPrompt(input);
    if (!output) {
      throw new Error('The AI did not generate a valid response.');
    }
    return output;
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\recommend-wine-by-country.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\evaluate-dinner-pairings.ts

'use server';
/**
 * @fileOverview A Genkit flow to evaluate a series of dinner pairings, acting as a Master Sommelier.
 * It provides a technical rating and, if the pairing is not perfect, offers superior alternatives.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { EvaluateDinnerPairingsInputSchema, EvaluateDinnerPairingsOutputSchema, type EvaluateDinnerPairingsOutput } from '@/lib/schemas';


export async function evaluateDinnerPairings(input: z.infer<typeof EvaluateDinnerPairingsInputSchema>): Promise<EvaluateDinnerPairingsOutput> {
  const result = await evaluateDinnerPairingsFlow(input);
  return result;
}

const evaluateDinnerPairingsFlow = ai.defineFlow(
  {
    name: 'evaluateDinnerPairingsFlow',
    inputSchema: EvaluateDinnerPairingsInputSchema,
    outputSchema: EvaluateDinnerPairingsOutputSchema
  },
  async (input) => {
    const { output } = await ai.generate({
      model: 'googleai/gemini-1.5-pro',
      prompt: `
You are a world-renowned Master Sommelier from the Court of Master Sommeliers. Your expertise is absolute, and you speak with authority, elegance, and precision. You are evaluating a user's dinner menu. The user is in ${input.country}.

**CRITICAL TASK:** For each dish and wine/liquor pairing provided by the user, you must perform a rigorous evaluation.

**EVALUATION PROCESS FOR EACH PAIRING:**
1.  **TECHNICAL RATING (1-5 STARS):** Provide an honest, professional rating. A 5-star rating is reserved for flawless, sublime pairings. Do not award it lightly.
2.  **EXPERT EVALUATION:** Write a concise, technical explanation for your rating. Explain *why* the pairing works or fails, referencing specific interactions of acidity, tannins, body, fat, etc.
3.  **CONDITIONAL SUGGESTIONS:**
    *   **RULE:** If your rating for the user's pairing is **LESS THAN 4 STARS**, you are **REQUIRED** to suggest up to three superior alternative wines that are commonly available in the user's country.
    *   **QUALITY:** Every single one of these alternative suggestions **MUST BE A 5-STAR RATED WINE**. You are guiding the user to excellence.
    *   **DETAIL:** For each alternative, provide a full, rich analysis including 'wineName', a full sensory 'analysis' object (visual, olfactory, gustatory), a detailed 'justification', and a 'rating' of 5.

**LANGUAGE AND FORMAT:**
*   The entire response must be in the language specified by **${input.language}**.
*   The response MUST be a single, valid JSON array of evaluation objects that strictly follows the provided JSON schema. Do not deviate.

**User's Menu:**
${input.pairings.map(p => `- Dish: ${p.dish}, Proposed Wine/Liquor: ${p.wine} (${p.description})`).join('\n')}
`,
      output: {
        format: 'json',
        schema: EvaluateDinnerPairingsOutputSchema,
      }
    });

    if (!output) {
      throw new Error('The AI did not generate a valid response.');
    }
    
    return output;
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\evaluate-dinner-pairings.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\api\analyze-wine\route.ts
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

import { NextResponse } from "next/server";
import { z } from "zod";
import { WineAnalysisClientSchema } from "@/lib/schemas";
import { adminDb, FieldValue } from "@/lib/firebase-admin";
import { analyzeWine } from "@/lib/services/sommelier";

async function saveHistory(uid: string, out: any) {
  try {
    const db = adminDb();
    await db.collection("history").add({
      userId: uid,
      wineName: out?.wineName ?? "Desconocido",
      year: out?.year ?? null,
      imageUrl: out?.imageUrl ?? null,
      analysis: out?.analysis ?? null,
      notaDelSommelier: out?.notaDelSommelier ?? null,
      servicio: out?.servicio ?? null,
      pairings: out?.pairings ?? [],
      country: out?.country ?? null,
      grapeVariety: out?.grapeVariety ?? null,
      createdAt: FieldValue.serverTimestamp(),
    });
  } catch (err) { console.warn("[analyze-wine] saveHistory warn:", err); }
}

async function bumpUsageIfNotAdmin(uid: string) {
  const db = adminDb();
  const ref = db.collection("users").doc(uid);
  const snap = await ref.get();
  const data = snap.exists ? (snap.data() || {}) : {};
  const isAdmin = data?.role === "admin" || data?.username === "venrique70";
  if (isAdmin) return;
  await ref.set({ usage: { analyzeWine: { current: FieldValue.increment(1) } } }, { merge: true });
}

export async function POST(req: Request) {
  try {
    const json = await req.json();
    const input = WineAnalysisClientSchema.parse(json); // year: z.coerce.number()

    if (!input.uid) {
      return NextResponse.json({ ok: false, error: "Debes iniciar sesión para analizar un producto" }, { status: 401 });
    }

    const aiRes: any = await analyzeWine(input);

    const out = {
      ok: true,
      id: aiRes?.id ?? undefined,
      wineName: aiRes?.wineName ?? input.wineName,
      year: aiRes?.year ?? input.year,
      country: aiRes?.country ?? input.country ?? null,
      grapeVariety: aiRes?.grapeVariety ?? input.grapeVariety ?? null,
      analysis: aiRes?.analysis ?? { visual: aiRes?.visual ?? {}, olfativa: aiRes?.olfativa ?? {}, gustativa: aiRes?.gustativa ?? {} },
      notaDelSommelier: aiRes?.notaDelSommelier ?? aiRes?.sommelierNote ?? null,
      servicio: aiRes?.servicio ?? aiRes?.service ?? null,
      pairings: aiRes?.pairings ?? [],
      imageUrl: aiRes?.analysis?.visual?.imageUrl ?? aiRes?.imageUrl ?? null,
    };

    await Promise.allSettled([ saveHistory(input.uid, out), bumpUsageIfNotAdmin(input.uid) ]);
    return NextResponse.json(out);
  } catch (e: any) {
    if (e instanceof z.ZodError) return NextResponse.json({ ok: false, error: "Entrada inválida", issues: e.issues }, { status: 400 });
    console.error("[api/analyze-wine] ERROR:", e?.message || e);
    return NextResponse.json({ ok: false, error: String(e?.message || e) }, { status: 500 });
  }
}
--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\api\analyze-wine\route.ts

--- MISSING: src/app/api/enrich-wine/route.ts

--- MISSING: src/app/api/recommend-wine/route.ts

--- MISSING: src/app/api/pair-dinner/route.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\api\history\route.ts
import { NextResponse } from "next/server";
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

// 🔒 Parche temporal: NO usa firebase-admin. Devuelve lista vacía sin romper la UI.
export async function POST() {
  return NextResponse.json({ analyses: [] });
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\api\history\route.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\components\features\wine-analysis-tab.tsx
"use client";

import * as React from "react";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import type { z } from "zod";
import {
  Sparkles,
  Wine,
  Star,
  Image as ImageIcon,
  ThumbsUp,
  ThumbsDown,
  Send,
  Loader2,
  Info,
  Edit,
  Building,
  MapPin,
  Leaf,
  Utensils,
  GlassWater,
  Calendar,
  Award,
  Users,
} from "lucide-react";
import Image from "next/image";
import Link from "next/link";

import { WineAnalysisClientSchema } from "@/lib/schemas";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Skeleton } from "@/components/ui/skeleton";
import { useToast } from "@/hooks/use-toast";
import type { WineAnalysis, WineAnalysisError, Correction } from "@/types";
import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";
import { type Language, type Translation } from "@/lib/translations";
import { useAuth } from "@/hooks/use-auth";
import { PairingList } from "@/components/features/PairingList";
import { getWineAnalysis } from "@/ai/flows/actions";
import { Badge } from "../ui/badge";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

// --- Helper Components ---

function StarRating({
  rating,
  className,
}: {
  rating: number | undefined;
  className?: string;
}) {
  if (rating === undefined) return null;
  return (
    <div className={cn("flex items-center gap-0.5", className)}>
      {Array.from({ length: 5 }).map((_, i) => (
        <Star
          key={i}
          className={cn(
            "size-5",
            i < Math.round(rating)
              ? "text-yellow-400 fill-yellow-400"
              : "text-muted-foreground/30",
          )}
        />
      ))}
    </div>
  );
}

function InteractiveStarRating({
  rating,
  setRating,
}: {
  rating: number;
  setRating: (rating: number) => void;
}) {
  const [hoverRating, setHoverRating] = useState(0);

  return (
    <div className="flex items-center gap-1 py-2">
      {[1, 2, 3, 4, 5].map((star) => (
        <Star
          key={star}
          className={cn(
            "size-8 cursor-pointer transition-colors",
            (hoverRating || rating) >= star
              ? "text-yellow-400 fill-yellow-400"
              : "text-muted-foreground/50 hover:text-muted-foreground",
          )}
          onMouseEnter={() => setHoverRating(star)}
          onMouseLeave={() => setHoverRating(0)}
          onClick={() => setRating(star)}
        />
      ))}
    </div>
  );
}

const Corrections = ({
  corrections,
  notes,
}: {
  corrections?: Correction[];
  notes?: string;
}) => {
  if (!corrections || (corrections.length === 0 && !notes)) return null;
  return (
    <Alert variant="default" className="border-primary/30 bg-primary/10">
      <Edit className="h-4 w-4 text-primary" />
      <AlertTitle className="text-primary">Nota del Sommelier IA</AlertTitle>
      <AlertDescription>
        {notes && <p className="mb-2">{notes}</p>}
        {corrections && corrections.length > 0 && (
          <ul className="list-disc pl-4 text-sm space-y-1">
            {corrections.map((c, i) => (
              <li key={i}>
                Se corrigió <strong>{c.field}</strong> de "{c.original}" a "
                <strong>{c.corrected}</strong>".
              </li>
            ))}
          </ul>
        )}
      </AlertDescription>
    </Alert>
  );
};

const DetailItem = ({
  icon: Icon,
  label,
  value,
}: {
  icon: React.ElementType;
  label: string;
  value: string | number | undefined | null;
}) => {
  if (!value) return null;
  return (
    <div className="flex items-start gap-3">
      <Icon className="size-5 text-primary flex-shrink-0 mt-1" />
      <div>
        <p className="font-semibold text-muted-foreground">{label}</p>
        <p className="text-foreground whitespace-pre-line">{value}</p>
      </div>
    </div>
  );
};

// --- Main Tab Component ---

export function WineAnalysisTab({
  t,
  language,
}: {
  t: Translation;
  language: Language;
}) {
  const { user, profile, loading: authLoading } = useAuth();

  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<WineAnalysis | null>(null);
  const { toast } = useToast();
  const [feedbackRating, setFeedbackRating] = useState(0);
  const [feedbackComment, setFeedbackComment] = useState("");
  const [feedbackSubmitted, setFeedbackSubmitted] = useState(false);

  const form = useForm<z.infer<typeof WineAnalysisClientSchema>>({
    resolver: zodResolver(WineAnalysisClientSchema),
    defaultValues: {
      uid: "",
      wineName: "AMADOR DIEZ",
      grapeVariety: "VERDEJO",
      year: 2018,
      wineryName: "",
      country: "",
      foodToPair: "",
      language: "es",
    },
  });

  React.useEffect(() => {
    if (user) {
      form.setValue("uid", user.uid);
    }
  }, [user, form]);

  const onSubmit = async (data: z.infer<typeof WineAnalysisClientSchema>) => {
    if (!user || !profile) {
      toast({
        title: "Error de autenticación",
        description: "Debes iniciar sesión para analizar un producto.",
        variant: "destructive",
      });
      return;
    }

    // BYPASS de límite para admin / email / flag en Firestore
    const isUnlimited =
      (profile as any)?.unlimited === true ||
      user?.email?.toLowerCase() === "venrique70@gmail.com" ||
      (profile as any)?.role === "admin";

    if (!isUnlimited) {
      const { current, limit } =
        profile?.usage?.analyzeWine ?? ({ current: 0, limit: 0 } as const);

      const reachedLimit =
        limit !== Infinity &&
        limit !== Number.POSITIVE_INFINITY &&
        current >= limit;

      if (reachedLimit) {
        toast({
          title: "Límite de Análisis Alcanzado",
          description:
            "Has agotado tus análisis gratuitos para este mes. ¡Sube de plan para seguir explorando!",
          variant: "destructive",
          duration: 8000,
          action: (
            <Button asChild size="sm">
              <Link href="/planes">Ver Planes</Link>
            </Button>
          ),
        });
        return;
      }
    }

    setLoading(true);
    setResult(null);
    setFeedbackRating(0);
    setFeedbackComment("");
    setFeedbackSubmitted(false);

    try {
      const payload = {
        ...data,
        language,
        uid: user.uid,
      };

      const analysisResponse = await getWineAnalysis(payload);

      if (!analysisResponse) {
        toast({
          title: t.unexpectedError,
          description:
            "La IA no ha devuelto ninguna respuesta. Por favor, inténtelo de nuevo.",
          variant: "destructive",
          duration: 8000,
        });
        setResult(null);
      } else if ("error" in analysisResponse) {
        toast({
          title: t.analysisError,
          description: (analysisResponse as WineAnalysisError).error,
          variant: "destructive",
          duration: 8000,
        });
        setResult(null);
      } else {
        setResult(analysisResponse as WineAnalysis);
      }
    } catch (error) {
      console.error("Failed to analyze wine:", error);
      const errorMessage = error instanceof Error ? error.message : t.generic;
      toast({
        title: t.unexpectedError,
        description: `${t.generic}: ${errorMessage}`,
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleFeedbackSubmit = () => {
    console.log("Feedback submitted:", {
      rating: feedbackRating,
      comment: feedbackComment,
    });
    toast({
      title: t.thankYouForFeedback,
      description: t.feedbackHelpsUsImprove,
    });
    setFeedbackSubmitted(true);
  };

  const planName = profile?.subscription?.plan || "...";
  const currentUsage = profile?.usage?.analyzeWine?.current ?? 0;
  const usageLimit = profile?.usage?.analyzeWine?.limit ?? 5;
  const remaining = usageLimit - currentUsage;

  if (authLoading) {
    return (
      <div className="flex justify-center items-center py-16">
        <Loader2 className="animate-spin mr-2" />
        Cargando perfil de usuario...
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <CardHeader>
        <CardTitle>Análisis Sensorial</CardTitle>
        {profile && usageLimit !== Infinity && (
          <Alert className="mt-4">
            <Info className="h-4 w-4" />
            <AlertTitle>Plan {planName}</AlertTitle>
            <AlertDescription>
              Te quedan {Math.max(0, remaining)} de {usageLimit} análisis este
              mes.
            </AlertDescription>
          </Alert>
        )}
      </CardHeader>

      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
              <FormField
                control={form.control}
                name="wineName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Nombre del Producto</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="ej. Catena Zapata, Whisky Grants..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="grapeVariety"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Cepa / Atributo Principal</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="ej. 12 Años, Cabernet Sauvignon"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="year"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Año (Cosecha/Embotellado)</FormLabel>
                    <FormControl>
                      <Input type="number" placeholder={t.yearPlaceholder} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="wineryName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Bodega / Destilería (Opcional)</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="ej. Bodega Catena Zapata"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="country"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{t.countryOptional}</FormLabel>
                    <FormControl>
                      <Input placeholder={t.countryPlaceholder} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="foodToPair"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{t.foodToPairOptional}</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder={t.foodToPairPlaceholder}
                      rows={3}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="flex flex-col items-center gap-2 pt-4">
              <Button type="submit" variant="destructive" disabled={loading} size="lg">
                {loading ? (
                  <Loader2 className="mr-2 animate-spin" />
                ) : (
                  <Sparkles className="mr-2" />
                )}
                {loading ? t.analyzing : "Analizar Producto"}
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>

      {loading && (
        <div className="space-y-6">
          <div className="grid gap-6 md:grid-cols-3">
            {[...Array(3)].map((_, i) => (
              <Card key={i}>
                <CardContent className="p-0">
                  <Skeleton className="w-full aspect-square rounded-t-lg" />
                </CardContent>
                <CardHeader>
                  <Skeleton className="h-6 w-3/4" />
                </CardHeader>
                <CardContent className="space-y-2">
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-5/6" />
                </CardContent>
              </Card>
            ))}
          </div>
          <Card>
            <CardHeader>
              <Skeleton className="h-6 w-1/2" />
            </CardHeader>
            <CardContent className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-3/4" />
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <Skeleton className="h-6 w-1/2" />
            </CardHeader>
            <CardContent className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              <Skeleton className="h-20 w-full" />
              <Skeleton className="h-20 w-full" />
              <Skeleton className="h-20 w-full" />
              <Skeleton className="h-20 w-full" />
            </CardContent>
          </Card>
        </div>
      )}

      {result && result.analysis && (
        <div className="space-y-6">
          <Corrections corrections={result.corrections} notes={result.notes} />

          <Card>
            <CardHeader>
              <Badge
                variant="secondary"
                className="w-fit mb-2 bg-green-500/20 text-green-300"
              >
                {result.isAiGenerated ? "Análisis Genérico" : "Análisis Verificado"}
              </Badge>
              <CardTitle className="text-3xl font-bold">
                {result.wineName} {result.year}
              </CardTitle>
              <CardDescription className="text-lg flex flex-wrap items-center gap-x-4 gap-y-1 pt-1">
                <span className="flex items-center gap-2">
                  <Building className="size-4" />
                  {result.wineryName}
                </span>
                {result.analysis.wineryLocation && (
                  <span className="flex items-center gap-2">
                    <MapPin className="size-4" />
                    {result.analysis.wineryLocation}, {result.country}
                  </span>
                )}
              </CardDescription>
            </CardHeader>
          </Card>

          <div className="grid gap-6 md:grid-cols-3">
            <Card className="flex flex-col">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Wine className="size-6" /> Fase Visual
                </CardTitle>
              </CardHeader>
              <CardContent className="flex-grow flex flex-col gap-4">
                {result.analysis.visual?.imageUrl ? (
                  <Image
                    src={result.analysis.visual.imageUrl}
                    alt={t.visualAnalysis}
                    width={512}
                    height={512}
                    className="rounded-lg object-cover aspect-square w-full"
                    data-ai-hint="wine glass"
                  />
                ) : (
                  <div className="bg-muted rounded-lg aspect-square w-full flex items-center justify-center">
                    <ImageIcon className="size-16 text-muted-foreground" />
                  </div>
                )}
                <p className="text-muted-foreground">
                  {result.analysis.visual?.description}
                </p>
              </CardContent>
            </Card>

            <Card className="flex flex-col">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Leaf className="size-6" /> Fase Olfativa
                </CardTitle>
              </CardHeader>
              <CardContent className="flex-grow flex flex-col gap-4">
                {result.analysis.olfactory?.imageUrl ? (
                  <Image
                    src={result.analysis.olfactory.imageUrl}
                    alt={t.olfactoryAnalysis}
                    width={512}
                    height={512}
                    className="rounded-lg object-cover aspect-square w-full"
                    data-ai-hint="abstract aroma"
                  />
                ) : (
                  <div className="bg-muted rounded-lg aspect-square w-full flex items-center justify-center">
                    <ImageIcon className="size-16 text-muted-foreground" />
                  </div>
                )}
                <p className="text-muted-foreground">
                  {result.analysis.olfactory?.description}
                </p>
              </CardContent>
            </Card>

            <Card className="flex flex-col">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Utensils className="size-6" /> Fase Gustativa
                </CardTitle>
              </CardHeader>
              <CardContent className="flex-grow flex flex-col gap-4">
                {result.analysis.gustatory?.imageUrl ? (
                  <Image
                    src={result.analysis.gustatory.imageUrl}
                    alt={t.gustatoryAnalysis}
                    width={512}
                    height={512}
                    className="rounded-lg object-cover aspect-square w-full"
                    data-ai-hint="abstract flavor"
                  />
                ) : (
                  <div className="bg-muted rounded-lg aspect-square w-full flex items-center justify-center">
                    <ImageIcon className="size-16 text-muted-foreground" />
                  </div>
                )}
                <p className="text-muted-foreground">
                  {result.analysis.gustatory?.description}
                </p>
              </CardContent>
            </Card>
          </div>

          {result.foodToPair && (
            <Card>
              <CardHeader>
                <CardTitle>Maridaje con: {result.foodToPair}</CardTitle>
                <div className="flex items-center gap-2 pt-2">
                  <span className="text-muted-foreground">
                    Calificación del maridaje:
                  </span>
                  <StarRating rating={result.pairingRating} />
                </div>
              </CardHeader>
              <CardContent>
                <p className="text-muted-foreground">{result.pairingNotes}</p>
              </CardContent>
            </Card>
          )}

          <Card>
            <CardHeader>
              <CardTitle>Maridajes Recomendados</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-8 md:grid-cols-2 pt-6">
              <div>
                <h3 className="font-semibold text-lg flex items-center gap-2 text-green-400">
                  <ThumbsUp /> Combinaciones Ideales
                </h3>
                <div className="mt-2 text-sm">
                  <PairingList text={result.analysis.recommendedPairings} />
                </div>
              </div>
              <div>
                <h3 className="font-semibold text-lg flex items-center gap-2 text-destructive">
                  <ThumbsDown /> Evitar Combinar con
                </h3>
                <p className="text-muted-foreground whitespace-pre-line mt-2">
                  {result.analysis.avoidPairings}
                </p>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>El Alma del Vino</CardTitle>
            </CardHeader>
            <CardContent className="grid md:grid-cols-2 lg:grid-cols-3 gap-x-8 gap-y-10 pt-6">
              <DetailItem icon={Wine} label={t.wineType} value={result.analysis.wineType} />
              <DetailItem icon={Award} label={t.appellation} value={result.analysis.appellation} />
              <div>
                <p className="font-semibold text-muted-foreground">{t.qualityLevel}</p>
                <StarRating rating={result.analysis.qualityRating} />
              </div>
              <DetailItem icon={Users} label={t.targetAudience} value={result.analysis.targetAudience} />
              <DetailItem icon={Info} label={t.barrelInfo} value={result.analysis.barrelInfo} />
              <DetailItem icon={Wine} label={t.grapeVarieties} value={result.analysis.grapeVariety} />
              <DetailItem icon={Info} label={t.servingTemperature} value={result.analysis.servingTemperature} />
              <DetailItem icon={GlassWater} label={t.decanterRecommendation} value={result.analysis.decanterRecommendation} />
              <DetailItem icon={Calendar} label={t.agingPotential} value={result.analysis.agingPotential} />
              <DetailItem icon={Leaf} label={t.tanninLevel} value={result.analysis.tanninLevel} />
              <DetailItem icon={Award} label="Premios" value={result.analysis.awards} />
              <div className="space-y-2">
                <p className="font-semibold text-muted-foreground">{t.suggestedGlassType}</p>
                <p className="text-foreground">{result.analysis.suggestedGlassType}</p>
                {result.analysis.suggestedGlassTypeImageUrl && (
                  <div className="relative h-24 w-24">
                    <Image
                      src={result.analysis.suggestedGlassTypeImageUrl}
                      alt={`${t.suggestedGlassType}: ${result.analysis.suggestedGlassType}`}
                      width={96}
                      height={96}
                      className="rounded-lg object-contain bg-white p-1"
                      data-ai-hint="wine glass"
                    />
                  </div>
                )}
              </div>
              <DetailItem
                icon={Award}
                label="Está en los 50 Best & Michelin"
                value={result.analysis.world50BestRestaurants}
              />
            </CardContent>
          </Card>

          <div className="py-6 text-center">
            <p className="font-signature text-4xl text-primary/90">
              Court of Master Sommeliers
            </p>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>{t.rateYourExperience}</CardTitle>
              <CardDescription>{t.rateYourExperienceDescription}</CardDescription>
            </CardHeader>
            <CardContent>
              {feedbackSubmitted ? (
                <div className="flex flex-col items-center justify-center rounded-lg border-2 border-dashed bg-accent/20 p-8 text-center">
                  <Star className="size-10 text-yellow-400 fill-yellow-400 mb-4" />
                  <p className="text-lg font-semibold text-primary">
                    {t.thankYouForFeedback}
                  </p>
                  <p className="text-muted-foreground">{t.feedbackSentSuccessfully}</p>
                </div>
              ) : (
                <div className="space-y-6">
                  <div>
                    <Label className="text-base font-semibold">{t.overallRating}</Label>
                    <InteractiveStarRating
                      rating={feedbackRating}
                      setRating={setFeedbackRating}
                    />
                  </div>
                  <div>
                    <Label htmlFor="feedback-comment" className="text-base font-semibold">
                      {t.commentsAndSuggestions}
                    </Label>
                    <Textarea
                      id="feedback-comment"
                      placeholder={t.commentsAndSuggestionsPlaceholder}
                      value={feedbackComment}
                      onChange={(e) => setFeedbackComment(e.target.value)}
                      rows={3}
                      className="mt-2"
                    />
                  </div>
                  <Button onClick={handleFeedbackSubmit} disabled={feedbackRating === 0}>
                    <Send className="mr-2" />
                    {t.sendFeedback}
                  </Button>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {result && !result.analysis && (
        <Card className="text-center p-8">
          <CardTitle>Análisis Incompleto</CardTitle>
          <CardDescription className="mt-2 max-w-prose mx-auto">
            La IA no pudo generar un análisis sensorial detallado en esta ocasión,
            pero aquí está la conclusión del sommelier.
          </CardDescription>
          <CardContent className="mt-4 text-left">
            <Corrections corrections={result.corrections} notes={result.notes} />
          </CardContent>
        </Card>
      )}
    </div>
  );
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\components\features\wine-analysis-tab.tsx

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\(main)\account\page.tsx

"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/hooks/use-auth";
import { Wine, Award, Utensils, User, Calendar, HandCoins, LogOut, Briefcase, Loader2, ExternalLink } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Skeleton } from "@/components/ui/skeleton";
import { useToast } from "@/hooks/use-toast";
import { doc, onSnapshot } from "firebase/firestore";
import { db } from "@/lib/firebase";
import { sendPasswordReset, logout } from "@/lib/auth";
import { useRouter } from "next/navigation";
import { requestVendorRole } from "./actions";
import Link from "next/link";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";


function UsageBar({ label, icon, current, limit }: { label: string, icon: React.ReactNode, current: number, limit: number }) {
  const percentage = limit > 0 ? (current / limit) * 100 : 0;
  const isUnlimited = limit >= 9999;

  return (
    <div className="space-y-2">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
            {icon}
            <span className="font-medium text-sm">{label}</span>
        </div>
        <span className="text-sm text-muted-foreground">
            {isUnlimited ? 'Ilimitado' : `${current} / ${limit}`}
        </span>
      </div>
      <Progress value={isUnlimited ? 100 : percentage} />
    </div>
  );
}

export default function AccountPage() {
  const { profile, loading, user } = useAuth();
  const [isRequestingVendor, setIsRequestingVendor] = useState(false);
  const { toast } = useToast();
  const router = useRouter();

  useEffect(() => {
    if (!loading && !user) {
      router.push('/login');
    }
  }, [user, loading, router]);


  const renewalDateString = profile?.subscription?.renewalDate
    ? new Date(profile.subscription.renewalDate.seconds * 1000).toLocaleDateString()
    : 'N/A';

  const handleManageSubscription = () => {
     router.push('/planes');
  };

   const handlePasswordChange = async () => {
     if (!profile?.email) return;
     try {
        await sendPasswordReset(profile.email);
        toast({
            title: "Correo de recuperación enviado",
            description: "Hemos enviado un enlace a tu correo para que puedas cambiar tu contraseña de forma segura.",
        });
     } catch (error) {
        toast({
            title: "Error al enviar correo",
            description: "No se pudo enviar el correo de recuperación. Inténtalo de nuevo.",
            variant: "destructive",
        });
     }
  };

  const handleLogout = async () => {
    try {
        await logout(router);
    } catch(error) {
         toast({
            title: "Error al cerrar sesión",
            description: "No se pudo cerrar la sesión. Inténtalo de nuevo.",
            variant: "destructive",
        });
    }
  }

  const handleVendorRequest = async () => {
    if (!user || !profile) return;
    setIsRequestingVendor(true);
    try {
        const result = await requestVendorRole();
        if(result.success) {
            toast({
                title: "Solicitud Enviada",
                description: "Tu solicitud para ser vendedor ha sido enviada. Recibirás una notificación cuando sea revisada.",
            });
        } else {
            throw new Error(result.error || "No se pudo enviar la solicitud.");
        }
    } catch (error: any) {
        toast({
            title: "Error en la Solicitud",
            description: error.message,
            variant: "destructive",
        });
    } finally {
        setIsRequestingVendor(false);
    }
  }


  if (loading) {
    return (
      <div className="space-y-8">
        <div>
          <Skeleton className="h-10 w-1/3" />
          <Skeleton className="h-5 w-2/3 mt-2" />
        </div>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <Card className="lg:col-span-1">
                <CardHeader><Skeleton className="h-8 w-3/4" /></CardHeader>
                <CardContent className="space-y-6">
                    <div className="flex items-center gap-3"><Skeleton className="size-6 rounded-full" /><Skeleton className="h-6 w-full" /></div>
                    <div className="flex items-center gap-3"><Skeleton className="size-6 rounded-full" /><Skeleton className="h-6 w-full" /></div>
                    <div className="flex items-center gap-3"><Skeleton className="size-6 rounded-full" /><Skeleton className="h-6 w-full" /></div>
                </CardContent>
            </Card>
             <Card className="lg:col-span-2">
                <CardHeader><Skeleton className="h-8 w-1/2" /></CardHeader>
                <CardContent className="space-y-8">
                    <div className="space-y-6">
                        <div className="space-y-2"><div className="flex justify-between"><Skeleton className="h-5 w-1/4" /><Skeleton className="h-5 w-1/6" /></div><Skeleton className="h-4 w-full" /></div>
                        <div className="space-y-2"><div className="flex justify-between"><Skeleton className="h-5 w-1/4" /><Skeleton className="h-5 w-1/6" /></div><Skeleton className="h-4 w-full" /></div>
                        <div className="space-y-2"><div className="flex justify-between"><Skeleton className="h-5 w-1/4" /><Skeleton className="h-5 w-1/6" /></div><Skeleton className="h-4 w-full" /></div>
                    </div>
                     <div className="border-t pt-6 flex flex-col sm:flex-row gap-4">
                        <Skeleton className="h-12 w-full" />
                        <Skeleton className="h-12 w-full" />
                    </div>
                </CardContent>
            </Card>
        </div>
      </div>
    );
  }
  
  if (!profile) {
      return (
        <div>
            <h1 className="text-4xl font-bold tracking-tight text-primary">Error de Cuenta</h1>
            <p className="text-muted-foreground mt-2">No se pudo cargar tu perfil. Por favor, intenta cerrar sesión y volver a entrar.</p>
            <Button onClick={handleLogout} variant="destructive" className="mt-4">
                <LogOut className="mr-2" />
                Cerrar Sesión
            </Button>
        </div>
      )
  }

  const { displayName, email, subscription, usage, role, vendorRequestStatus } = profile;

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-4xl font-bold tracking-tight text-primary">Mi Cuenta</h1>
        <p className="text-muted-foreground mt-2">Gestiona tu perfil, suscripción y consulta tu uso mensual.</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <Card className="lg:col-span-1">
          <CardHeader>
            <CardTitle className="text-2xl">Perfil de Usuario</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-3">
              <User className="text-primary" />
              <div>
                <p className="font-semibold">{displayName}</p>
                <p className="text-sm text-muted-foreground">{email}</p>
              </div>
            </div>
             <div className="flex items-center gap-3">
              <HandCoins className="text-primary" />
              <div>
                <p className="font-semibold">Plan {subscription?.plan || 'N/A'}</p>
                <p className="text-sm text-muted-foreground">Estado: <span className="text-green-400 font-medium">{subscription?.status || 'N/A'}</span></p>
              </div>
            </div>
             <div className="flex items-center gap-3">
              <Calendar className="text-primary" />
              <div>
                <p className="font-semibold">Próxima Renovación</p>
                <p className="text-sm text-muted-foreground">{renewalDateString}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="lg:col-span-2">
           <CardHeader>
            <CardTitle className="text-2xl">Consumo del Ciclo Actual</CardTitle>
          </CardHeader>
          <CardContent className="space-y-8">
             <div className="space-y-6">
                <UsageBar label="Análisis de Vino" icon={<Wine />} current={usage?.analyzeWine?.current || 0} limit={usage?.analyzeWine?.limit || 0} />
                <UsageBar label="Recomendaciones" icon={<Award />} current={usage?.recommendWine?.current || 0} limit={usage?.recommendWine?.limit || 0} />
                <UsageBar label="Cenas Maridaje" icon={<Utensils />} current={usage?.pairDinner?.current || 0} limit={usage?.pairDinner?.limit || 0} />
             </div>
             
             <div className="border-t pt-6 space-y-4">
                <h3 className="text-lg font-semibold">Acciones de la Cuenta</h3>
                 <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-2 gap-4">
                    <Button onClick={handleManageSubscription} className="w-full">Gestionar Suscripción</Button>
                    <Button onClick={handlePasswordChange} variant="secondary" className="w-full">Cambiar Contraseña</Button>
                    
                    <Button onClick={handleLogout} variant="destructive" className="w-full sm:col-span-2 lg:col-span-2">
                        <LogOut className="mr-2" />
                        Cerrar Sesión
                    </Button>
                </div>
             </div>
          </CardContent>
        </Card>
      </div>

       {role === 'user' && (
         <Card>
            <CardHeader>
                <CardTitle>Conviértete en Afiliado</CardTitle>
                <CardDescription>¿Te gustaría ganar comisiones recomendando SommelierPro AI? Completa nuestro formulario de solicitud.</CardDescription>
            </CardHeader>
            <CardContent>
                 {vendorRequestStatus === 'pending' ? (
                    <Alert variant="default" className="border-primary/30 bg-primary/10">
                        <Loader2 className="h-4 w-4 animate-spin text-primary" />
                        <AlertTitle className="text-primary">Solicitud Pendiente</AlertTitle>
                        <AlertDescription>
                            Hemos recibido tu solicitud para ser vendedor. La revisaremos y te notificaremos pronto. ¡Gracias por tu interés!
                        </AlertDescription>
                    </Alert>
                ) : (
                    <div className="space-y-4">
                        <div className="flex flex-col sm:flex-row gap-4 items-center rounded-lg border p-4">
                            <div className="flex-grow">
                                <p className="font-semibold">Paso 1: Completa el formulario de solicitud</p>
                                <p className="text-sm text-muted-foreground">Para evaluar tu perfil, por favor completa nuestro formulario de inscripción de referidos. Esto nos ayuda a conocerte mejor.</p>
                            </div>
                            <Button asChild>
                               <Link href="https://forms.gle/wbXsjwVfc1QZ3bmF9" target="_blank">
                                    Ir al Formulario <ExternalLink className="ml-2"/>
                               </Link>
                            </Button>
                        </div>
                         <div className="flex flex-col sm:flex-row gap-4 items-center rounded-lg border p-4 mt-4">
                            <div className="flex-grow">
                                <p className="font-semibold">Paso 2: Solicita tu rol en la app</p>
                                <p className="text-sm text-muted-foreground">Una vez que hayas enviado el formulario, haz clic aquí. Verificaremos tu envío y activaremos tu rol de vendedor.</p>
                            </div>
                             <Button onClick={handleVendorRequest} disabled={isRequestingVendor || ((vendorRequestStatus as any) === 'pending' || vendorRequestStatus === 'approved')} variant="secondary">
                                {isRequestingVendor ? <Loader2 className="animate-spin mr-2"/> : <Briefcase className="mr-2"/>}
                                Solicitar Rol de Vendedor
                             </Button>
                        </div>
                    </div>
                )}
            </CardContent>
         </Card>
      )}

    </div>
  );
}

    
--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\(main)\account\page.tsx

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\(main)\history\page.tsx
"use client";

import { useEffect, useState } from "react";
import { useAuth } from "@/hooks/use-auth";
import { useRouter } from "next/navigation";
import Link from "next/link";
import Image from "next/image";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { AlertCircle, History, ImageIcon } from "lucide-react";
import { Badge } from "@/components/ui/badge";

// ⚠️ OJO: NO importes listAnalyses aquí

type AnalysisSummary = {
  id: string;
  wineName: string;
  year?: number;
  grapeVariety?: string;
  imageUrl?: string;
  createdAt: string | number | Date;
};

export default function HistoryPage() {
  const [analyses, setAnalyses] = useState<AnalysisSummary[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (authLoading) return;
    if (!user) {
      router.push("/login");
      return;
    }

    const fetchAnalyses = async () => {
      try {
        const res = await fetch("/api/history", {
          method: "POST",
          headers: { "content-type": "application/json" },
          body: JSON.stringify({ uid: user.uid }),
        });

        const result = await res.json();
        if (!res.ok || result?.error) {
          setError(result?.error || `HTTP ${res.status}`);
          return;
        }

        setAnalyses((result.analyses ?? []) as AnalysisSummary[]);
      } catch (e: any) {
        setError(e?.message || "Un error inesperado ocurrió.");
      } finally {
        setLoading(false);
      }
    };

    fetchAnalyses();
  }, [user, authLoading, router]);

  if (loading) {
    return (
      <div className="space-y-8">
        <div>
          <h1 className="text-4xl font-bold tracking-tight text-primary flex items-center gap-3">
            <History /> Mi Historial de Análisis
          </h1>
          <p className="text-muted-foreground mt-2">Cargando tus análisis guardados...</p>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <Card key={i}>
              <CardHeader>
                <Skeleton className="rounded-lg object-cover aspect-square w-full" />
                <Skeleton className="h-6 w-3/4 mt-4" />
                <Skeleton className="h-5 w-1/2" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-6 w-1/3" />
              </CardContent>
              <CardFooter><Skeleton className="h-10 w-full" /></CardFooter>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>Error al Cargar el Historial</AlertTitle>
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-4xl font-bold tracking-tight text-primary flex items-center gap-3">
          <History /> Mi Historial de Análisis
        </h1>
        <p className="text-muted-foreground mt-2">
          Aquí puedes encontrar todos los análisis de productos que has realizado.
        </p>
      </div>

      {analyses.length === 0 ? (
        <Card className="text-center p-12">
          <CardTitle>Tu historial está vacío</CardTitle>
          <CardDescription className="mt-2">Aún no has realizado ningún análisis. ¡Prueba SommelierPro AI!</CardDescription>
          <Button asChild className="mt-4">
            <Link href="/">Realizar mi primer análisis</Link>
          </Button>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          {analyses.map((analysis) => (
            <Card key={analysis.id} className="flex flex-col">
              <CardHeader>
                {analysis.imageUrl ? (
                  <Image
                    src={analysis.imageUrl}
                    alt={`Imagen de ${analysis.wineName}`}
                    width={400}
                    height={400}
                    className="rounded-lg object-cover aspect-square w-full"
                    data-ai-hint="wine bottle"
                  />
                ) : (
                  <div className="bg-muted rounded-lg aspect-square w-full flex items-center justify-center">
                    <ImageIcon className="size-16 text-muted-foreground" />
                  </div>
                )}
                <CardTitle className="mt-4 pt-2">{analysis.wineName}</CardTitle>
                <CardDescription>{analysis.grapeVariety || "N/A"} - {analysis.year}</CardDescription>
              </CardHeader>
              <CardContent className="flex-grow">
                <Badge variant="outline">
                  Analizado: {new Date(analysis.createdAt).toLocaleDateString()}
                </Badge>
              </CardContent>
              <CardFooter>
                <Button asChild className="w-full">
                  <Link href={`/history/${analysis.id}`}>Ver Detalle</Link>
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\(main)\history\page.tsx

--- MISSING: src/app/(main)/history/[id]/page.tsx

--- MISSING: src/app/(main)/cellar

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\list-analyses.ts
'use server';
/**
 * Server-side list of analyses for the logged-in user.
 * Uses Firebase Admin (no client-side security rules involved).
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { getFirebaseAdminApp } from '@/lib/firebase-admin';
import * as admin from 'firebase-admin';

type AnalysisSummary = {
  id: string;
  wineName: string;
  grapeVariety?: string;
  year?: number;
  imageUrl?: string;
  createdAt: string; // ISO
};

export type ListAnalysesOutput =
  | { analyses: AnalysisSummary[] }
  | { error: string };

const InputSchema = z.object({
  uid: z.string().min(1, 'uid requerido'),
  limit: z.number().min(1).max(200).optional(),
});

function toISO(ts: any): string | undefined {
  if (!ts) return undefined;
  // admin.firestore.Timestamp
  // @ts-ignore
  if (typeof ts?.toDate === 'function') return ts.toDate().toISOString();
  if (ts instanceof Date) return ts.toISOString();
  return undefined;
}

export async function listAnalyses(input: z.infer<typeof InputSchema>): Promise<ListAnalysesOutput> {
  return listAnalysesFlow(input);
}

const listAnalysesFlow = ai.defineFlow(
  {
    name: 'listAnalysesFlow',
    inputSchema: InputSchema,
    // No definimos un zod estricto para output porque es union.
    outputSchema: z.any(),
  },
  async ({ uid, limit }) => {
    try {
      const app = getFirebaseAdminApp();
      const db = admin.firestore(app);
      const max = limit ?? 50;

      // 1) Consulta principal en /history filtrando por uid
      const q1 = db
        .collection('history')
        .where('uid', '==', uid)
        .orderBy('createdAt', 'desc')
        .limit(max);

      let snap = await q1.get();

      // 2) Si no hay resultados, intenta en /wineAnalyses con userId
      if (snap.empty) {
        const q2 = db
          .collection('wineAnalyses')
          .where('userId', '==', uid)
          .orderBy('createdAt', 'desc')
          .limit(max);

        snap = await q2.get();
      }

      const analyses: AnalysisSummary[] = snap.docs.map((d) => {
        const data = d.data() as any;
        return {
          id: d.id,
          wineName: data.wineName ?? 'Análisis',
          grapeVariety: data.analysis?.grapeVariety ?? data.grapeVariety,
          year: data.year,
          imageUrl:
            data.analysis?.visual?.imageUrl ??
            data.imageUrl ??
            data.coverImageUrl,
          createdAt: toISO(data.createdAt) ?? new Date().toISOString(),
        };
      });

      return { analyses };
    } catch (err: any) {
      console.error('listAnalyses error:', err);
      return { error: err?.message ?? 'Error al cargar tu historial.' };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\list-analyses.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\list-wines-from-cellar.ts
'use server';
/**
 * Server-side list of wines in the user's cellar (sin índices compuestos).
 * Usamos Firebase Admin y evitamos orderBy; ordenamos en memoria.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { adminDb } from '@/lib/firebase-admin'; // ✅ usar helper adminDb (no admin.firestore)

import type {
  ListWinesFromCellarInput,
  ListWinesFromCellarOutput,
} from '@/lib/schemas';

const InputSchema = z.object({
  uid: z.string().min(1, 'uid requerido'),
  limit: z.number().min(1).max(200).optional(),
});

function toISO(ts: any): string | undefined {
  if (!ts) return undefined;
  // admin.firestore.Timestamp compatible
  // @ts-ignore
  if (typeof ts?.toDate === 'function') return ts.toDate().toISOString();
  if (ts instanceof Date) return ts.toISOString();
  if (typeof ts === 'string') return ts;
  return undefined;
}

export async function listWinesFromCellar(
  input: ListWinesFromCellarInput
): Promise<ListWinesFromCellarOutput> {
  return listWinesFromCellarFlow(input);
}

const listWinesFromCellarFlow = ai.defineFlow(
  {
    name: 'listWinesFromCellarFlow',
    inputSchema: InputSchema,
    outputSchema: z.any(),
  },
  async ({ uid, limit }) => {
    try {
      const max = limit ?? 100;
      const db = adminDb(); // ✅ Firestore Admin listo

      // 1) /cellar con igualdad por uid (SIN orderBy -> no necesita índice compuesto)
      let snap = await db
        .collection('cellar')
        .where('uid', '==', uid)
        .limit(max)
        .get();

      // 2) /cellars si vacío
      if (snap.empty) {
        snap = await db
          .collection('cellars')
          .where('uid', '==', uid)
          .limit(max)
          .get();
      }

      // 3) /users/{uid}/cellar si aún vacío
      if (snap.empty) {
        snap = await db
          .collection('users')
          .doc(uid)
          .collection('cellar')
          .limit(max)
          .get();
      }

      let wines = snap.docs.map((d) => {
        const data = d.data() as any;
        const createdAtISO = toISO(data.createdAt) ?? new Date().toISOString();
        return {
          id: d.id,
          name: data.name ?? 'Vino',
          variety: data.variety ?? data.cepa,
          year: data.year,
          quantity: data.quantity ?? 1,
          status: data.status ?? 'Listo para Beber',
          createdAt: createdAtISO,
          uid,
        };
      });

      // Ordenamos en memoria por fecha desc y aplicamos límite
      wines.sort(
        (a, b) =>
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      );
      if (wines.length > max) wines = wines.slice(0, max);

      return { wines };
    } catch (err: any) {
      console.error('listWinesFromCellar error:', err);
      return { error: err?.message ?? 'Error al cargar tu bodega.' };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\list-wines-from-cellar.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\add-wine-to-cellar.ts

'use server';
/**
 * @fileOverview A Genkit flow to add a wine to a user's personal cellar in Firestore.
 * 
 * - addWineToCellar - Adds a wine to the cellar.
 * - AddWineToCellarInput - The input type for the flow.
 * - AddWineToCellarOutput - The output type for the flow.
 */

import { ai } from '@/ai/genkit';
import { db } from '@/lib/firebase';
import { collection, addDoc, serverTimestamp } from 'firebase/firestore';
import {
  AddWineToCellarServerSchema,
  AddWineToCellarOutputSchema,
  type AddWineToCellarInput,
  type AddWineToCellarOutput,
  type WineInCellar,
} from '@/lib/schemas';
import { doc } from 'firebase/firestore';


/**
 * Adds a wine to the user's cellar subcollection in Firestore.
 * @param input The wine details and user UID.
 * @returns A promise that resolves to the result of the operation.
 */
export async function addWineToCellar(input: AddWineToCellarInput): Promise<AddWineToCellarOutput> {
  return addWineToCellarFlow(input);
}

const addWineToCellarFlow = ai.defineFlow(
  {
    name: 'addWineToCellarFlow',
    inputSchema: AddWineToCellarServerSchema,
    outputSchema: AddWineToCellarOutputSchema,
  },
  async (input) => {
    try {
      const userCellarRef = collection(db, 'users', input.uid, 'cellar');

      const wineData = {
        name: input.name,
        variety: input.variety,
        year: input.year,
        quantity: input.quantity,
        status: input.status,
        dateAdded: serverTimestamp(),
      };

      const docRef = await addDoc(userCellarRef, wineData);
      
      const newWine: WineInCellar = {
        ...input,
        id: docRef.id,
        dateAdded: new Date().toISOString(),
      }

      return { success: true, wineId: docRef.id, wine: newWine };

    } catch (e: any) {
      console.error(`Error in addWineToCellarFlow for user ${input.uid}:`, e);
      let errorMessage = `Ocurrió un error inesperado al guardar el vino. Detalle: ${e.message}`;
      return { success: false, error: errorMessage };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\add-wine-to-cellar.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\delete-wine-from-cellar.ts

'use server';
/**
 * @fileOverview A Genkit flow to delete a wine from a user's personal cellar in Firestore.
 */

import { ai } from '@/ai/genkit';
import { db } from '@/lib/firebase';
import { doc, deleteDoc } from 'firebase/firestore';
import {
  DeleteWineFromCellarInputSchema,
  DeleteWineFromCellarOutputSchema,
  type DeleteWineFromCellarInput,
  type DeleteWineFromCellarOutput,
} from '@/lib/schemas';


export async function deleteWineFromCellar(input: DeleteWineFromCellarInput): Promise<DeleteWineFromCellarOutput> {
  return deleteWineFromCellarFlow(input);
}

const deleteWineFromCellarFlow = ai.defineFlow(
  {
    name: 'deleteWineFromCellarFlow',
    inputSchema: DeleteWineFromCellarInputSchema,
    outputSchema: DeleteWineFromCellarOutputSchema,
  },
  async ({ uid, wineId }) => {
    try {
      const wineDocRef = doc(db, 'users', uid, 'cellar', wineId);
      await deleteDoc(wineDocRef);

      return { success: true };

    } catch (e: any) {
      console.error(`Error in deleteWineFromCellarFlow for user ${uid}:`, e);
      let errorMessage = `Ocurrió un error inesperado al eliminar el vino. Detalle: ${e.message}`;
      return { success: false, error: errorMessage };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\delete-wine-from-cellar.ts

--- MISSING: src/app/(main)/admin/affiliates/page.tsx

--- MISSING: src/components/affiliates/AffiliatesManager.tsx

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\(main)\admin\vendedores\page.tsx

"use client";

import { useEffect, useState, useTransition } from 'react';
import { useAuth } from '@/hooks/use-auth';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { AlertCircle, Users, CheckCircle, Clock, Loader2, Building } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import type { Vendedor, VendorRequest, CorporateRequest } from '@/lib/schemas';
import { listVendedores, listVendorRequests, approveVendorRequest, listCorporateRequests } from './actions';


const ActiveVendorsTable = ({ vendors }: { vendors: Vendedor[] }) => (
    <Table>
        <TableHeader>
            <TableRow>
            <TableHead>Nombre</TableHead>
            <TableHead>Email</TableHead>
            <TableHead className="text-center">Referidos Activos</TableHead>
            <TableHead className="text-right">Comisiones Pagadas</TableHead>
            <TableHead className="text-center">Estado</TableHead>
            </TableRow>
        </TableHeader>
        <TableBody>
            {vendors.length > 0 ? (
            vendors.map((vendedor) => (
                <TableRow key={vendedor.uid}>
                <TableCell className="font-medium">{vendedor.displayName}</TableCell>
                <TableCell>{vendedor.email}</TableCell>
                <TableCell className="text-center">{vendedor.activeReferrals || 0}</TableCell>
                <TableCell className="text-right">${(vendedor.totalCommission || 0).toFixed(2)}</TableCell>
                <TableCell className="text-center">
                    <Badge variant="secondary" className="bg-green-500/20 text-green-300">Activo</Badge>
                </TableCell>
                </TableRow>
            ))
            ) : (
            <TableRow>
                <TableCell colSpan={5} className="h-24 text-center">
                Aún no hay vendedores activos.
                </TableCell>
            </TableRow>
            )}
        </TableBody>
    </Table>
);

const PendingRequestsTable = ({ requests, onApprove }: { requests: VendorRequest[], onApprove: (uid: string) => void }) => {
    const [isApproving, setIsApproving] = useState<string | null>(null);

    const handleApprove = (uid: string) => {
        setIsApproving(uid);
        onApprove(uid);
    }
    
    return (
        <Table>
            <TableHeader>
                <TableRow>
                <TableHead>Nombre</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Fecha de Solicitud</TableHead>
                <TableHead className="text-right">Acción</TableHead>
                </TableRow>
            </TableHeader>
            <TableBody>
                {requests.length > 0 ? (
                requests.map((request) => (
                    <TableRow key={request.uid}>
                    <TableCell className="font-medium">{request.displayName}</TableCell>
                    <TableCell>{request.email}</TableCell>
                    <TableCell>{new Date(request.requestedAt).toLocaleDateString()}</TableCell>
                    <TableCell className="text-right">
                        <Button size="sm" onClick={() => handleApprove(request.uid)} disabled={isApproving === request.uid}>
                           {isApproving === request.uid ? <Loader2 className="animate-spin" /> : <CheckCircle />}
                           Aprobar
                        </Button>
                    </TableCell>
                    </TableRow>
                ))
                ) : (
                <TableRow>
                    <TableCell colSpan={4} className="h-24 text-center">
                    No hay solicitudes pendientes.
                    </TableCell>
                </TableRow>
                )}
            </TableBody>
        </Table>
    );
};

const CorporateRequestsTable = ({ requests }: { requests: CorporateRequest[] }) => (
    <Table>
        <TableHeader>
            <TableRow>
                <TableHead>Empresa</TableHead>
                <TableHead>Contacto</TableHead>
                <TableHead>Email</TableHead>
                <TableHead>Código de Acceso</TableHead>
                <TableHead>Fecha de Solicitud</TableHead>
            </TableRow>
        </TableHeader>
        <TableBody>
            {requests.length > 0 ? (
                requests.map((request) => (
                    <TableRow key={request.id}>
                        <TableCell className="font-medium">{request.companyName}</TableCell>
                        <TableCell>{request.contactName}</TableCell>
                        <TableCell>{request.contactEmail}</TableCell>
                        <TableCell>
                            <Badge variant="outline">{request.accessCode}</Badge>
                        </TableCell>
                        <TableCell>{new Date(request.requestedAt).toLocaleDateString()}</TableCell>
                    </TableRow>
                ))
            ) : (
                <TableRow>
                    <TableCell colSpan={5} className="h-24 text-center">
                        No hay solicitudes de planes corporativos.
                    </TableCell>
                </TableRow>
            )}
        </TableBody>
    </Table>
);



export default function AdminVendedoresPage() {
  const [vendedores, setVendedores] = useState<Vendedor[]>([]);
  const [requests, setRequests] = useState<VendorRequest[]>([]);
  const [corporateRequests, setCorporateRequests] = useState<CorporateRequest[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { profile, user, loading: authLoading } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  const [isPending, startTransition] = useTransition();

  const fetchData = async (adminUid: string) => {
    setLoading(true);
    setError(null);
    try {
        const [vendorsResult, requestsResult, corporateResult] = await Promise.all([
            listVendedores({ adminUid }),
            listVendorRequests({ adminUid }),
            listCorporateRequests({ adminUid })
        ]);

        if (vendorsResult.error) throw new Error(vendorsResult.error);
        setVendedores(vendorsResult.vendedores || []);
        
        if (requestsResult.error) throw new Error(requestsResult.error);
        setRequests(requestsResult.requests || []);

        if (corporateResult.error) throw new Error(corporateResult.error);
        setCorporateRequests(corporateResult.requests || []);

    } catch (e: any) {
        setError(e.message || "Un error inesperado ocurrió.");
    } finally {
        setLoading(false);
    }
  }

  useEffect(() => {
    if (authLoading) return;
    if (!user) {
      router.push('/login');
      return;
    }
    if (profile && profile.role !== 'admin') {
      setError("Acceso denegado. No tienes permisos para ver esta página.");
      setLoading(false);
      return;
    }
    if (user && profile) {
        fetchData(user.uid);
    }
  }, [profile, user, authLoading, router]);

  const handleApproveRequest = (uidToApprove: string) => {
    if (!user) return;
    startTransition(async () => {
        try {
            const result = await approveVendorRequest({ adminUid: user.uid, uidToApprove });
            if (result.success) {
                toast({
                    title: "Vendedor Aprobado",
                    description: "El usuario ha sido ascendido a vendedor y notificado.",
                });
                // Refresh data
                fetchData(user.uid);
            } else {
                throw new Error(result.error || "No se pudo aprobar la solicitud.");
            }
        } catch (e: any) {
             toast({
                title: "Error al Aprobar",
                description: e.message,
                variant: "destructive",
            });
        }
    });
  }


  if (loading || authLoading) {
    return (
      <div className="space-y-8">
        <div>
          <Skeleton className="h-10 w-1/2" />
          <Skeleton className="h-5 w-3/4 mt-2" />
        </div>
        <Card>
          <CardHeader><Skeleton className="h-8 w-1/4" /></CardHeader>
          <CardContent>
            <div className="space-y-4">
              {[...Array(5)].map((_, i) => <Skeleton key={i} className="h-12 w-full" />)}
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error) {
    return (
        <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
        </Alert>
    );
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-4xl font-bold tracking-tight text-primary flex items-center gap-3">
          <Users />
          Gestión de Vendedores
        </h1>
        <p className="text-muted-foreground mt-2">
          Supervisa a tus vendedores activos y gestiona las solicitudes pendientes.
        </p>
      </div>
      <Tabs defaultValue="active">
        <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="active">
                <CheckCircle className="mr-2"/> Vendedores Activos ({vendedores.length})
            </TabsTrigger>
            <TabsTrigger value="pending">
                <Clock className="mr-2"/> Solicitudes de Afiliación ({requests.length})
            </TabsTrigger>
            <TabsTrigger value="corporate">
                <Building className="mr-2"/> Solicitudes Corporativas ({corporateRequests.length})
            </TabsTrigger>
        </TabsList>
        <TabsContent value="active">
            <Card>
                <CardHeader>
                <CardTitle>Vendedores Activos</CardTitle>
                <CardDescription>
                    Una lista de todos los usuarios con el rol de vendedor.
                </CardDescription>
                </CardHeader>
                <CardContent>
                    <ActiveVendorsTable vendors={vendedores} />
                </CardContent>
            </Card>
        </TabsContent>
        <TabsContent value="pending">
            <Card>
                <CardHeader>
                <CardTitle>Solicitudes de Afiliación Pendientes</CardTitle>
                <CardDescription>
                    Usuarios que han solicitado convertirse en vendedores.
                </CardDescription>
                </CardHeader>
                <CardContent>
                    <PendingRequestsTable requests={requests} onApprove={handleApproveRequest} />
                </CardContent>
            </Card>
        </TabsContent>
        <TabsContent value="corporate">
            <Card>
                <CardHeader>
                    <CardTitle>Solicitudes de Planes Corporativos</CardTitle>
                    <CardDescription>
                        Empresas que han solicitado información sobre los planes corporativos.
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <CorporateRequestsTable requests={corporateRequests} />
                </CardContent>
            </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\(main)\admin\vendedores\page.tsx

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\(main)\admin\vendedores\actions.ts

'use server';

import { listVendedores as listVendedoresFlow } from '@/ai/flows/list-vendedores';
import { listVendorRequests as listVendorRequestsFlow } from '@/ai/flows/list-vendor-requests';
import { approveVendorRequest as approveVendorRequestFlow } from '@/ai/flows/approve-vendor-request';
import { listCorporateRequests as listCorporateRequestsFlow } from '@/ai/flows/list-corporate-requests';

import type { 
    ListVendedoresInput, 
    ListVendedoresOutput,
    ListVendorRequestsInput,
    ListVendorRequestsOutput,
    ApproveVendorRequestInput,
    ApproveVendorRequestOutput,
    ListCorporateRequestsInput,
    ListCorporateRequestsOutput,
} from '@/lib/schemas';


export async function listVendedores(input: ListVendedoresInput): Promise<ListVendedoresOutput> {
  return await listVendedoresFlow(input);
}

export async function listVendorRequests(input: ListVendorRequestsInput): Promise<ListVendorRequestsOutput> {
  return await listVendorRequestsFlow(input);
}

export async function approveVendorRequest(input: ApproveVendorRequestInput): Promise<ApproveVendorRequestOutput> {
  return await approveVendorRequestFlow(input);
}

export async function listCorporateRequests(input: ListCorporateRequestsInput): Promise<ListCorporateRequestsOutput> {
    return await listCorporateRequestsFlow(input);
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\(main)\admin\vendedores\actions.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\list-vendedores.ts

'use server';
/**
 * @fileOverview A secure Genkit flow to list all users with the 'vendedor' role.
 * This flow is intended to be called only by an administrator and uses the Firebase Admin SDK.
 */

import { ai } from '@/ai/genkit';
import {
  ListVendedoresInputSchema,
  ListVendedoresOutputSchema,
  type ListVendedoresInput,
  type ListVendedoresOutput,
} from '@/lib/schemas';
import { getFirebaseAdminApp } from '@/lib/firebase-admin';
import { z } from 'zod';
import { VendedorSchema } from '@/lib/schemas';
import * as admin from 'firebase-admin';


/**
 * A secure wrapper function that calls the Genkit flow to list sellers.
 * @param input The UID of the admin user.
 * @returns A promise that resolves to a list of sellers or an error.
 */
export async function listVendedores(input: ListVendedoresInput): Promise<ListVendedoresOutput> {
  return listVendedoresFlow(input);
}

const listVendedoresFlow = ai.defineFlow(
  {
    name: 'listVendedoresFlow',
    inputSchema: ListVendedoresInputSchema,
    outputSchema: ListVendedoresOutputSchema,
  },
  async ({ adminUid }) => {
    try {
      // Use Admin SDK for secure access
      const adminApp = getFirebaseAdminApp();
      const dbAdmin = admin.firestore(adminApp);

      // Step 1: Verify the user making the request is an admin.
      const adminUserDoc = await dbAdmin.collection('users').doc(adminUid).get();
      if (!adminUserDoc.exists || adminUserDoc.data()?.role !== 'admin') {
         return { error: 'Acceso Denegado: Tu cuenta no tiene permisos de administrador.' };
      }
      
      // Step 2: Fetch all users with the 'vendedor' role.
      const usersSnapshot = await dbAdmin.collection('users').where('role', '==', 'vendedor').get();
      
      if (usersSnapshot.empty) {
        return { vendedores: [] };
      }

      const vendedores = usersSnapshot.docs.map(doc => {
        const data = doc.data();
        return {
          uid: data.uid || doc.id,
          displayName: data.displayName || 'N/A',
          email: data.email || 'N/A',
          role: data.role || 'vendedor',
          activeReferrals: data.activeReferrals || 0,
          totalCommission: data.totalCommission || 0,
        };
      });

      const validatedVendedores = z.array(VendedorSchema).parse(vendedores);

      return { vendedores: validatedVendedores };

    } catch (e: any) {
      console.error('Error in listVendedoresFlow:', e);
      let errorMessage = e.message || 'Ocurrió un error inesperado en el servidor.';
      return { error: `Ocurrió un error inesperado en el servidor: ${errorMessage}` };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\list-vendedores.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\list-vendor-requests.ts

'use server';
/**
 * @fileOverview A secure Genkit flow for an admin to list pending vendor requests.
 */

import { ai } from '@/ai/genkit';
import {
  ListVendorRequestsInputSchema,
  ListVendorRequestsOutputSchema,
  type ListVendorRequestsInput,
  type ListVendorRequestsOutput,
  VendorRequestSchema,
} from '@/lib/schemas';
import { getFirebaseAdminApp } from '@/lib/firebase-admin';
import { z } from 'zod';
import * as admin from 'firebase-admin';


export async function listVendorRequests(input: ListVendorRequestsInput): Promise<ListVendorRequestsOutput> {
  return listVendorRequestsFlow(input);
}

const listVendorRequestsFlow = ai.defineFlow(
  {
    name: 'listVendorRequestsFlow',
    inputSchema: ListVendorRequestsInputSchema,
    outputSchema: ListVendorRequestsOutputSchema,
  },
  async ({ adminUid }) => {
    try {
      const adminApp = getFirebaseAdminApp();
      const dbAdmin = admin.firestore(adminApp);

      // 1. Verify the user is an admin
      const adminUserDoc = await dbAdmin.collection('users').doc(adminUid).get();
      if (!adminUserDoc.exists || adminUserDoc.data()?.role !== 'admin') {
        return { error: 'Acción no autorizada. Se requieren permisos de administrador.' };
      }

      // 2. Fetch users with a pending vendor request
      const requestsSnapshot = await dbAdmin.collection('users')
        .where('vendorRequestStatus', '==', 'pending')
        .get();
        
      if (requestsSnapshot.empty) {
        return { requests: [] };
      }

      const requests = requestsSnapshot.docs.map(doc => {
        const data = doc.data();
        const requestedAt = data.vendorRequestedAt?.toDate ? data.vendorRequestedAt.toDate().toISOString() : new Date().toISOString();
        return {
          uid: doc.id,
          displayName: data.displayName || 'N/A',
          email: data.email || 'N/A',
          requestedAt: requestedAt
        };
      });

      const validatedRequests = z.array(VendorRequestSchema).parse(requests);

      return { requests: validatedRequests };

    } catch (e: any) {
      console.error('Error in listVendorRequestsFlow:', e);
      return { error: `Ocurrió un error inesperado en el servidor: ${e.message}` };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\list-vendor-requests.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\approve-vendor-request.ts
'use server';
/**
 * @fileOverview A secure Genkit flow for an admin to approve a vendor request.
 */

import { ai } from '@/ai/genkit';
import {
  ApproveVendorRequestInputSchema,
  ApproveVendorRequestOutputSchema,
  type ApproveVendorRequestInput,
  type ApproveVendorRequestOutput,
} from '@/lib/schemas';

// ✅ Usamos los helpers de firebase-admin (no importamos "firebase-admin" directo)
import { adminDb, adminAuth } from '@/lib/firebase-admin';

export async function approveVendorRequest(
  input: ApproveVendorRequestInput
): Promise<ApproveVendorRequestOutput> {
  return approveVendorRequestFlow(input);
}

const approveVendorRequestFlow = ai.defineFlow(
  {
    name: 'approveVendorRequestFlow',
    inputSchema: ApproveVendorRequestInputSchema,
    outputSchema: ApproveVendorRequestOutputSchema,
  },
  async ({ adminUid, uidToApprove }) => {
    try {
      // ✅ Admin SDK a través de helpers
      const dbAdmin = adminDb();
      const auth = adminAuth();

      // 1) Verificar que quien solicita sea admin
      const adminUserDoc = await dbAdmin.collection('users').doc(adminUid).get();
      if (!adminUserDoc.exists || adminUserDoc.data()?.role !== 'admin') {
        return {
          success: false,
          error: 'Acción no autorizada. Se requieren permisos de administrador.',
        };
      }

      // 2) Cargar el usuario a aprobar
      const userToApproveRef = dbAdmin.collection('users').doc(uidToApprove);
      const userToApproveDoc = await userToApproveRef.get();

      if (!userToApproveDoc.exists) {
        return { success: false, error: 'El usuario a aprobar no fue encontrado.' };
      }

      const userToApproveData = userToApproveDoc.data();
      if (userToApproveData?.vendorRequestStatus !== 'pending') {
        return {
          success: false,
          error: 'El usuario no tiene una solicitud de vendedor pendiente.',
        };
      }

      // 3) Actualizar rol y estado de solicitud
      await userToApproveRef.update({
        role: 'vendedor',
        vendorRequestStatus: 'approved',
        'subscription.plan': 'Sibarita',
      });

      // 4) Actualizar custom claims en Firebase Auth
      await auth.setCustomUserClaims(uidToApprove, { role: 'vendedor' });

      return {
        success: true,
        message: `El usuario ${userToApproveData?.displayName ?? uidToApprove} ha sido aprobado como vendedor.`,
      };
    } catch (e: any) {
      console.error('Error in approveVendorRequestFlow:', e);
      return {
        success: false,
        error: `Ocurrió un error inesperado en el servidor: ${e.message}`,
      };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\approve-vendor-request.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\process-affiliate-commissions.ts

'use server';
/**
 * @fileOverview A Genkit flow for processing affiliate commissions for a given month.
 * This flow is intended to be triggered manually by an administrator.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { getFirebaseAdminApp } from '@/lib/firebase-admin';
import { FieldValue } from 'firebase-admin/firestore';
import * as admin from 'firebase-admin';

// --- Schemas ---

const ProcessCommissionsInputSchema = z.object({
  month: z.number().min(1).max(12).describe('The month (1-12) to process commissions for.'),
  year: z.number().min(2023).describe('The year to process commissions for.'),
});
export type ProcessCommissionsInput = z.infer<typeof ProcessCommissionsInputSchema>;

const ProcessCommissionsOutputSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  processedAffiliates: z.number().optional(),
  totalCommissionCalculated: z.number().optional(),
});
export type ProcessCommissionsOutput = z.infer<typeof ProcessCommissionsOutputSchema>;


// --- Commission & Plan Logic ---

const commissionTiers = {
  "Nuevo": { req: 0, "Iniciado": 0, "Una Copa": 0, "Copa Premium": 0, "Sibarita": 0 },
  "Pregrado": { req: 5, "Iniciado": 0.05, "Una Copa": 0.08, "Copa Premium": 0.10, "Sibarita": 0.15 },
  "Bachelor": { req: 10, "Iniciado": 0.07, "Una Copa": 0.10, "Copa Premium": 0.12, "Sibarita": 0.17 },
  "Pro": { req: 20, "Iniciado": 0.09, "Una Copa": 0.12, "Copa Premium": 0.15, "Sibarita": 0.18 },
  "Master": { req: 30, "Iniciado": 0.11, "Una Copa": 0.15, "Copa Premium": 0.17, "Sibarita": 0.20 },
};
type TierName = keyof typeof commissionTiers;

const planPrices = {
  'Iniciado': 3.99,
  'Una Copa': 7.99,
  'Copa Premium': 12.99,
  'Sibarita': 19.99,
};
type PlanName = keyof typeof planPrices;

// --- Main Flow ---

export async function processAffiliateCommissions(input: ProcessCommissionsInput): Promise<ProcessCommissionsOutput> {
  return processAffiliateCommissionsFlow(input);
}

const processAffiliateCommissionsFlow = ai.defineFlow(
  {
    name: 'processAffiliateCommissionsFlow',
    inputSchema: ProcessCommissionsInputSchema,
    outputSchema: ProcessCommissionsOutputSchema,
  },
  async ({ month, year }) => {
    try {
      const adminApp = getFirebaseAdminApp();
      if (!adminApp) {
        throw new Error('Server Credentials Error: Firebase Admin could not be initialized.');
      }
      const dbAdmin = admin.firestore(adminApp);

      // 1. Get all affiliates (vendedores)
      const affiliatesSnapshot = await dbAdmin.collection('users').where('role', '==', 'vendedor').get();
      if (affiliatesSnapshot.empty) {
        return { success: true, message: "No affiliates (vendedores) found to process." };
      }

      let totalCommission = 0;
      const batch = dbAdmin.batch();

      // For now, we simulate referrals as we don't have the tracking yet.
      // In a real scenario, you would query a 'referrals' collection.
      const allUsersSnapshot = await dbAdmin.collection('users').where('subscription.plan', '!=', 'Descubrete').get();
      
      for (const affiliateDoc of affiliatesSnapshot.docs) {
        const affiliateId = affiliateDoc.id;
        const affiliateData = affiliateDoc.data();
        
        // SIMULATION: Assign some users to this affiliate for calculation purposes.
        // This part needs to be replaced with actual referral data.
        const mockReferredUsers = allUsersSnapshot.docs.filter(doc => (doc.id.charCodeAt(0) % affiliatesSnapshot.size) === (affiliateId.charCodeAt(0) % affiliatesSnapshot.size));
        const activeReferralsCount = mockReferredUsers.length;
        
        // 2. Determine affiliate's tier
        let affiliateTier: TierName = "Nuevo";
        if (activeReferralsCount >= 30) affiliateTier = "Master";
        else if (activeReferralsCount >= 20) affiliateTier = "Pro";
        else if (activeReferralsCount >= 10) affiliateTier = "Bachelor";
        else if (activeReferralsCount >= 5) affiliateTier = "Pregrado";

        // 3. Calculate commission for this affiliate based on their mock referrals
        let affiliateMonthlyCommission = 0;
        mockReferredUsers.forEach(userDoc => {
            const userData = userDoc.data();
            const planName = userData.subscription?.plan as PlanName;
            if(planName && planPrices[planName]) {
                const planPrice = planPrices[planName];
                const commissionRate = commissionTiers[affiliateTier][planName] ?? 0;
                affiliateMonthlyCommission += planPrice * commissionRate;
            }
        });

        totalCommission += affiliateMonthlyCommission;

        // 4. Update the affiliate's document in Firestore
        const affiliateRef = dbAdmin.collection('users').doc(affiliateId);
        batch.update(affiliateRef, {
            activeReferrals: activeReferralsCount,
            totalCommission: FieldValue.increment(affiliateMonthlyCommission),
            // We could also store historical data
            [`commissionHistory.${year}-${month}`]: affiliateMonthlyCommission,
        });
      }

      // 5. Commit all updates in a single batch
      await batch.commit();

      const message = `Successfully processed commissions for ${month}/${year}. Affiliates processed: ${affiliatesSnapshot.size}. Total commission calculated: $${totalCommission.toFixed(2)}`;
      console.log(message);
      return { 
          success: true, 
          message,
          processedAffiliates: affiliatesSnapshot.size,
          totalCommissionCalculated: totalCommission,
      };

    } catch (e: any) {
      console.error(`Critical error in commissions flow for ${month}/${year}:`, e);
      return { success: false, message: `An unexpected error occurred: ${e.message}` };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\process-affiliate-commissions.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\(main)\corporate\page.tsx

"use client";

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Building, Check, KeySquare, Loader2, Send, Sparkles, Star } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { requestCorporateInfo, getCorporateInfo } from './actions';
import { RequestCorporateInfoClientSchema, GetCorporateInfoInputSchema } from '@/lib/schemas';
import { cn } from '@/lib/utils';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

type CorporateInfoRequestValues = z.infer<typeof RequestCorporateInfoClientSchema>;
type UnlockFormValues = z.infer<typeof GetCorporateInfoInputSchema>;

// Data based on the provided image
const corporatePlans = {
  copaPremium: {
    name: 'Plan Copa Premium',
    features: ['30 Análisis Sensoriales al mes', '15 Recomendaciones de Vino', '10 Cenas Maridaje'],
    pricing: [
      { subscriptions: 10, monthly: 117.9, yearly: 1109.9 },
      { subscriptions: 15, monthly: 176.9, yearly: 1664.9 },
      { subscriptions: 20, monthly: 235.9, yearly: 2219.9 },
      { subscriptions: 25, monthly: 294.9, yearly: 2774.9 },
    ],
  },
  sibarita: {
    name: 'Plan Sibarita',
    features: [
      '60 Análisis Sensoriales al mes',
      '20 Recomendaciones de Vino',
      '15 Cenas Maridaje',
      'Análisis por Ficha',
      'Mi Bodega Personal',
      'Mi Historial de Análisis',
      'Mi Carta (Restaurante)',
      'Acceso anticipado a funciones beta',
      'Acumulación de análisis no utilizados',
      'Reconocimiento como Embajador',
    ],
    pricing: [
      { subscriptions: 10, monthly: 179.9, yearly: 1707.9 },
      { subscriptions: 15, monthly: 269.9, yearly: 2651.9 },
      { subscriptions: 20, monthly: 362.9, yearly: 3416.9 },
      { subscriptions: 25, monthly: 453.9, yearly: 4269.9 },
    ],
  },
};

const PlanDetailCard = ({ plan, billingCycle }: { plan: (typeof corporatePlans)['copaPremium'], billingCycle: 'monthly' | 'yearly' }) => (
    <Card className="flex flex-col">
        <CardHeader>
            <CardTitle className="text-2xl text-primary">{plan.name}</CardTitle>
            <CardDescription>Detalles y precios por volumen.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6 flex-grow">
            <ul className="space-y-2 text-muted-foreground">
                {plan.features.map((feature, i) => (
                    <li key={i} className="flex items-start">
                        <Check className="size-5 text-green-500 mr-2 flex-shrink-0" />
                        <span>{feature}</span>
                    </li>
                ))}
            </ul>
            <Table>
                <TableHeader>
                    <TableRow>
                        <TableHead>Suscripciones</TableHead>
                        <TableHead className="text-right">Precio {billingCycle === 'monthly' ? 'Mensual' : 'Anual'} (USD)</TableHead>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    {plan.pricing.map((tier) => (
                        <TableRow key={tier.subscriptions}>
                            <TableCell>{tier.subscriptions}</TableCell>
                            <TableCell className="text-right font-semibold">${(billingCycle === 'monthly' ? tier.monthly : tier.yearly).toFixed(2)}</TableCell>
                        </TableRow>
                    ))}
                </TableBody>
            </Table>
        </CardContent>
    </Card>
);

const CorporateInfoView = () => {
    const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');

    return (
        <div className="space-y-8">
            <div className="text-center">
                 <h2 className="text-3xl font-bold tracking-tight text-primary">Planes Corporativos Exclusivos</h2>
                 <p className="text-muted-foreground mt-2">Soluciones diseñadas para potenciar tu negocio.</p>
            </div>
             <div className="flex items-center justify-center space-x-2">
                <Button variant={billingCycle === 'monthly' ? 'default' : 'ghost'} onClick={() => setBillingCycle('monthly')}>Facturación Mensual</Button>
                <Button variant={billingCycle === 'yearly' ? 'default' : 'ghost'} onClick={() => setBillingCycle('yearly')}>Facturación Anual (Ahorra 15%)</Button>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
                <PlanDetailCard plan={corporatePlans.copaPremium} billingCycle={billingCycle} />
                <PlanDetailCard plan={corporatePlans.sibarita} billingCycle={billingCycle} />
            </div>
        </div>
    );
}

export default function CorporatePage() {
    const [view, setView] = useState<'form' | 'success' | 'unlocked'>('form');
    const [isLoading, setIsLoading] = useState(false);
    const [unlockError, setUnlockError] = useState('');
    const { toast } = useToast();

    const requestForm = useForm<CorporateInfoRequestValues>({
        resolver: zodResolver(RequestCorporateInfoClientSchema),
        defaultValues: { companyName: '', contactName: '', contactEmail: '' },
    });

    const unlockForm = useForm<UnlockFormValues>({
        resolver: zodResolver(GetCorporateInfoInputSchema),
        defaultValues: { accessCode: '' },
    });

    const handleRequestSubmit = async (data: CorporateInfoRequestValues) => {
        setIsLoading(true);
        try {
            const result = await requestCorporateInfo(data);
            if (result.success) {
                setView('success');
            } else {
                throw new Error(result.error || 'Ocurrió un error inesperado.');
            }
        } catch (error: any) {
            toast({ title: "Error en la Solicitud", description: error.message, variant: 'destructive' });
        } finally {
            setIsLoading(false);
        }
    };

    const handleUnlockSubmit = async (data: UnlockFormValues) => {
        setIsLoading(true);
        setUnlockError('');
        try {
            const result = await getCorporateInfo(data);
            if (result.success) {
                setView('unlocked');
            } else {
                 setUnlockError(result.error || 'Código inválido o expirado.');
            }
        } catch (error: any) {
            setUnlockError(error.message || 'Ocurrió un error al verificar el código.');
        } finally {
            setIsLoading(false);
        }
    }


    if (view === 'unlocked') {
        return <CorporateInfoView />;
    }

    if (view === 'success') {
         return (
            <div className="flex flex-col items-center justify-center text-center space-y-6 max-w-2xl mx-auto py-12">
                 <div className="p-4 bg-green-500/20 rounded-full">
                    <Check className="size-16 text-green-500" />
                 </div>
                <h1 className="text-3xl font-bold text-primary">¡Solicitud Recibida!</h1>
                <p className="text-xl text-muted-foreground">
                    Hemos enviado un correo electrónico con tu código de acceso único.
                    Por favor, revísalo para ver nuestros planes corporativos.
                </p>
                 <Card className="w-full">
                     <CardHeader>
                         <CardTitle>¿No recibiste el correo?</CardTitle>
                         <CardDescription>Introduce el código que te hemos enviado para desbloquear la información.</CardDescription>
                     </CardHeader>
                    <CardContent>
                       <Form {...unlockForm}>
                            <form onSubmit={unlockForm.handleSubmit(handleUnlockSubmit)} className="flex items-start gap-4">
                                <FormField
                                    control={unlockForm.control}
                                    name="accessCode"
                                    render={({ field }) => (
                                        <FormItem className="flex-grow">
                                            <FormControl><Input placeholder="Tu código de acceso..." {...field} /></FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                                <Button type="submit" disabled={isLoading}>{isLoading ? <Loader2 className="animate-spin" /> : 'Desbloquear'}</Button>
                            </form>
                            {unlockError && <p className="text-sm text-destructive mt-2">{unlockError}</p>}
                        </Form>
                    </CardContent>
                </Card>
            </div>
         )
    }

    return (
        <div className="space-y-8 max-w-4xl mx-auto">
            <div>
                <h1 className="text-4xl font-bold tracking-tight text-primary flex items-center gap-3">
                    <Building />
                    Planes Corporativos
                </h1>
                <p className="text-muted-foreground mt-2">
                    Potencia a tu equipo o añade valor a tus clientes con SommelierPro AI. Ideal para bodegas, distribuidoras, restaurantes y hoteles.
                </p>
            </div>
            
            <Card>
                <CardHeader>
                    <CardTitle>Solicita Información Exclusiva</CardTitle>
                    <CardDescription>
                        Completa el formulario para recibir un código de acceso por correo y ver nuestros planes diseñados para empresas.
                    </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                   <Form {...requestForm}>
                        <form onSubmit={requestForm.handleSubmit(handleRequestSubmit)} className="space-y-6">
                            <FormField
                                control={requestForm.control}
                                name="companyName"
                                render={({ field }) => (
                                    <FormItem><FormLabel>Nombre de la Empresa</FormLabel><FormControl><Input placeholder="Ej. Restaurante La Cava" {...field} /></FormControl><FormMessage /></FormItem>
                                )}
                            />
                             <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <FormField
                                    control={requestForm.control}
                                    name="contactName"
                                    render={({ field }) => (
                                        <FormItem><FormLabel>Nombre del Contacto</FormLabel><FormControl><Input placeholder="Ej. Juan Pérez" {...field} /></FormControl><FormMessage /></FormItem>
                                    )}
                                />
                                <FormField
                                    control={requestForm.control}
                                    name="contactEmail"
                                    render={({ field }) => (
                                        <FormItem><FormLabel>Email del Contacto</FormLabel><FormControl><Input type="email" placeholder="juan.perez@ejemplo.com" {...field} /></FormControl><FormMessage /></FormItem>
                                    )}
                                />
                            </div>
                             <div className="text-center pt-4">
                                <Button size="lg" type="submit" disabled={isLoading}>
                                    {isLoading ? <Loader2 className="mr-2 animate-spin" /> : <Send className="mr-2" />}
                                    {isLoading ? 'Enviando...' : 'Enviar Solicitud'}
                                </Button>
                            </div>
                        </form>
                   </Form>
                </CardContent>
            </Card>
        </div>
    );
}

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\app\(main)\corporate\page.tsx

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\list-corporate-requests.ts

'use server';
/**
 * @fileOverview A secure Genkit flow for an admin to list corporate information requests.
 */

import { ai } from '@/ai/genkit';
import {
  ListCorporateRequestsInputSchema,
  ListCorporateRequestsOutputSchema,
  type ListCorporateRequestsInput,
  type ListCorporateRequestsOutput,
} from '@/lib/schemas';
import { getFirebaseAdminApp } from '@/lib/firebase-admin';
import { z } from 'zod';
import { CorporateRequestSchema } from '@/lib/schemas';
import * as admin from 'firebase-admin';


export async function listCorporateRequests(input: ListCorporateRequestsInput): Promise<ListCorporateRequestsOutput> {
  return listCorporateRequestsFlow(input);
}

const listCorporateRequestsFlow = ai.defineFlow(
  {
    name: 'listCorporateRequestsFlow',
    inputSchema: ListCorporateRequestsInputSchema,
    outputSchema: ListCorporateRequestsOutputSchema,
  },
  async ({ adminUid }) => {
    try {
      // Use Admin SDK for secure access
      const adminApp = getFirebaseAdminApp();
      const dbAdmin = admin.firestore(adminApp);

      // 1. Verify the requesting user is an admin
      const adminUserDoc = await dbAdmin.collection('users').doc(adminUid).get();
      if (!adminUserDoc.exists || adminUserDoc.data()?.role !== 'admin') {
        return { error: 'Acción no autorizada. Se requieren permisos de administrador.' };
      }

      // 2. Fetch all corporate requests
      const requestsRef = dbAdmin.collection('corporateRequests');
      const q = requestsRef.orderBy('requestedAt', 'desc');
      const requestsSnapshot = await q.get();

      if (requestsSnapshot.empty) {
        return { requests: [] };
      }

      const requests = requestsSnapshot.docs.map(doc => {
        const data = doc.data();
        const requestedAtDate = data.requestedAt?.toDate ? data.requestedAt.toDate() : new Date();
        return {
          id: doc.id,
          companyName: data.companyName || 'N/A',
          contactName: data.contactName || 'N/A',
          contactEmail: data.contactEmail || 'N/A',
          accessCode: data.accessCode || 'N/A',
          requestedAt: requestedAtDate.toISOString(),
        };
      });
      
      const validatedRequests = z.array(CorporateRequestSchema).parse(requests);

      return { requests: validatedRequests };

    } catch (e: any) {
      console.error('Error in listCorporateRequestsFlow:', e);
      return { error: `Ocurrió un error inesperado en el servidor: ${e.message}` };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\list-corporate-requests.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\register-corporate-sale.ts

'use server';
/**
 * @fileOverview A Genkit flow for an affiliate to register a corporate sale.
 * This flow will eventually calculate commissions.
 */

import { ai } from '@/ai/genkit';
import { db } from '@/lib/firebase';
import { collection, query, where, getDocs, doc, updateDoc, increment } from 'firebase/firestore';
import {
    RegisterCorporateSaleInput,
    RegisterCorporateSaleOutputSchema,
    RegisterCorporateSaleSchema,
} from '@/lib/schemas';
import { getFirebaseAdminApp } from '@/lib/firebase-admin';
import * as admin from 'firebase-admin';

export async function registerCorporateSale(input: RegisterCorporateSaleInput): Promise<{ success: boolean; message?: string; error?: string }> {
  return registerCorporateSaleFlow(input);
}

const registerCorporateSaleFlow = ai.defineFlow(
  {
    name: 'registerCorporateSaleFlow',
    inputSchema: RegisterCorporateSaleSchema,
    outputSchema: RegisterCorporateSaleOutputSchema,
  },
  async ({ vendedorUid, accessCode, plan, subscriptions, billingCycle }) => {
    try {
        const adminApp = getFirebaseAdminApp();
        const dbAdmin = admin.firestore(adminApp);

        // 1. Verify the company exists with the given access code
        const corporateReqQuery = query(
            collection(db, 'corporateRequests'),
            where('accessCode', '==', accessCode)
        );
        const corporateReqSnapshot = await getDocs(corporateReqQuery);

        if (corporateReqSnapshot.empty) {
            return { success: false, error: 'No se encontró ninguna empresa con ese código de acceso.' };
        }

        const companyDoc = corporateReqSnapshot.docs[0];
        const companyName = companyDoc.data().companyName;

        // 2. TODO: Calculate commission based on the corporate commission structure.
        // For now, we just log the sale. In the future, this would calculate the amount
        // and update the affiliate's `totalCommission` field.
        const commissionAmount = 0; // Placeholder

        // 3. Log the sale event (e.g., in a 'sales' collection or update the affiliate)
        console.log(`Sale registered by affiliate ${vendedorUid}:
            - Company: ${companyName} (${accessCode})
            - Plan: ${plan}
            - Subscriptions: ${subscriptions}
            - Cycle: ${billingCycle}
            - Commission: $${commissionAmount} (placeholder)
        `);

        // Example of how you might update the affiliate's stats in the future
        // const affiliateRef = dbAdmin.collection('users').doc(vendedorUid);
        // await affiliateRef.update({
        //     totalCommission: increment(commissionAmount),
        //     corporateSales: increment(1)
        // });


      return { success: true, message: `Venta para ${companyName} registrada con éxito.` };

    } catch (e: any) {
      console.error(`Error in registerCorporateSaleFlow for affiliate ${vendedorUid}:`, e);
      return { success: false, error: `Ocurrió un error inesperado en el servidor: ${e.message}` };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\register-corporate-sale.ts

--- BEGIN C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\get-corporate-info.ts

'use server';
/**
 * @fileOverview A Genkit flow to verify an access code and return corporate plan details.
 */

import { ai } from '@/ai/genkit';
import { db } from '@/lib/firebase';
import { collection, query, where, getDocs, limit } from 'firebase/firestore';
import { GetCorporateInfoInputSchema, GetCorporateInfoOutputSchema, GetCorporateInfoOutput } from '@/lib/schemas';

// Static plan data, same as used on the frontend, but held on the server for verification.
const corporatePlansData = {
  copaPremium: {
    name: 'Plan Copa Premium',
    features: ['30 Análisis Sensoriales al mes', '15 Recomendaciones de Vino', '10 Cenas Maridaje'],
    pricing: [
      { subscriptions: 10, monthly: 117.9, yearly: 1109.9 },
      { subscriptions: 15, monthly: 176.9, yearly: 1664.9 },
      { subscriptions: 20, monthly: 235.9, yearly: 2219.9 },
      { subscriptions: 25, monthly: 294.9, yearly: 2774.9 },
    ],
  },
  sibarita: {
    name: 'Plan Sibarita',
    features: [
      '60 Análisis Sensoriales al mes',
      '20 Recomendaciones de Vino',
      '15 Cenas Maridaje',
      'Análisis por Ficha',
      'Mi Bodega Personal',
      'Mi Historial de Análisis',
      'Mi Carta (Restaurante)',
      'Acceso anticipado a funciones beta',
      'Acumulación de análisis no utilizados',
      'Reconocimiento como Embajador',
    ],
    pricing: [
      { subscriptions: 10, monthly: 179.9, yearly: 1707.9 },
      { subscriptions: 15, monthly: 269.9, yearly: 2651.9 },
      { subscriptions: 20, monthly: 362.9, yearly: 3416.9 },
      { subscriptions: 25, monthly: 453.9, yearly: 4269.9 },
    ],
  },
};

export async function getCorporateInfo(input: { accessCode: string }): Promise<GetCorporateInfoOutput> {
  return getCorporateInfoFlow(input);
}

const getCorporateInfoFlow = ai.defineFlow(
  {
    name: 'getCorporateInfoFlow',
    inputSchema: GetCorporateInfoInputSchema,
    outputSchema: GetCorporateInfoOutputSchema,
  },
  async ({ accessCode }) => {
    try {
      const q = query(
        collection(db, 'corporateRequests'),
        where('accessCode', '==', accessCode),
        limit(1)
      );
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        return { success: false, error: 'El código de acceso no es válido o ha expirado.' };
      }

      // If the code is valid, return the static plan data.
      return { success: true, data: corporatePlansData };

    } catch (e: any) {
      console.error('Error in getCorporateInfoFlow:', e);
      return { success: false, error: 'Ocurrió un error en el servidor al verificar el código.' };
    }
  }
);

--- END C:\SOMMELIERAI-PRO\SOMMELIERAI-PRO-FINAL\sommelierai-pro\src\ai\flows\get-corporate-info.ts

--- MISSING: src/app/api/corporate/create/route.ts

