'use server';

/**
 * @fileOverview Generates a description of a wine variety based on its name.
 *
 * - generateVarietyDescription - A function that generates a description of a wine variety.
 * - GenerateVarietyDescriptionInput - The input type for the generateVarietyDescription function.
 * - GenerateVarietyDescriptionOutput - The return type for the generateVarietyDescription function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateVarietyDescriptionInputSchema = z.object({
  varietyName: z.string().describe('The name of the wine variety.'),
});
export type GenerateVarietyDescriptionInput = z.infer<
  typeof GenerateVarietyDescriptionInputSchema
>;

const GenerateVarietyDescriptionOutputSchema = z.object({
  description: z.string().describe('The description of the wine variety.'),
  isAppGenerated: z
    .boolean()
    .optional()
    .describe(
      'Whether the description was generated by the app because the specific wine variety was not found.'
    ),
});
export type GenerateVarietyDescriptionOutput = z.infer<
  typeof GenerateVarietyDescriptionOutputSchema
>;

export async function generateVarietyDescription(
  input: GenerateVarietyDescriptionInput
): Promise<GenerateVarietyDescriptionOutput> {
  return generateVarietyDescriptionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateVarietyDescriptionPrompt',
  input: {schema: GenerateVarietyDescriptionInputSchema},
  output: {schema: GenerateVarietyDescriptionOutputSchema},
  prompt: `You are a sommelier. Generate a detailed description of the following wine variety, including its visual, olfactory, and gustatory characteristics:

Variety Name: {{{varietyName}}}

If the provided wine variety is not found, generate a description based on similar wines and note that the analysis is app-generated by setting isAppGenerated to true. Otherwise, isAppGenerated should be false or not set at all. Focus on clear metaphors and analogies.`,
});

const generateVarietyDescriptionFlow = ai.defineFlow(
  {
    name: 'generateVarietyDescriptionFlow',
    inputSchema: GenerateVarietyDescriptionInputSchema,
    outputSchema: GenerateVarietyDescriptionOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
