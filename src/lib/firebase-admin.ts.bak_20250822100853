import { App, cert, getApp, getApps, initializeApp } from "firebase-admin/app";
import { Firestore, getFirestore } from "firebase-admin/firestore";
import fs from "node:fs";
import path from "node:path";

/** Intenta leer Service Account desde env (JSON o base64) */
function readSAFromEnv(): Record<string, any> | null {
  const raw = process.env.FIREBASE_SERVICE_ACCOUNT_KEY;
  if (!raw) return null;
  try { return JSON.parse(raw); } catch {
    try { return JSON.parse(Buffer.from(raw, "base64").toString("utf8")); } catch { return null; }
  }
}

/** Intenta leer Service Account desde serviceAccount.local.json en la raíz */
function readSAFromFile(): Record<string, any> | null {
  try {
    const p = path.join(process.cwd(), "serviceAccount.local.json");
    if (!fs.existsSync(p)) return null;
    return JSON.parse(fs.readFileSync(p, "utf8"));
  } catch { return null; }
}

function resolveProjectId(sa?: any): string | undefined {
  return (
    sa?.project_id ||
    process.env.FIREBASE_PROJECT_ID ||
    process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID ||
    process.env.GOOGLE_CLOUD_PROJECT ||
    process.env.GCLOUD_PROJECT
  );
}

let _app: App | null = null;

export function getFirebaseAdminApp(): App {
  if (_app) return _app;

  const sa = readSAFromEnv() ?? readSAFromFile();
  const pid = resolveProjectId(sa);

  if (!getApps().length) {
    if (sa) {
      _app = initializeApp({ credential: cert(sa as any), projectId: sa.project_id || pid });
    } else if (pid) {
      // Sin SA, pero con projectId (ADC o emulador)
      _app = initializeApp({ projectId: pid });
    } else {
      // Último recurso: initializeApp() y confían en ADC
      _app = initializeApp();
    }
  } else {
    _app = getApp();
  }

  // Fijar variables de proyecto para librerías de Google
  const projectId = resolveProjectId(sa) || pid;
  if (projectId) {
    if (!process.env.GOOGLE_CLOUD_PROJECT) process.env.GOOGLE_CLOUD_PROJECT = projectId;
    if (!process.env.GCLOUD_PROJECT) process.env.GCLOUD_PROJECT = projectId;
    if (!process.env.FIREBASE_PROJECT_ID) process.env.FIREBASE_PROJECT_ID = projectId;
  }

  return _app!;
}

export function adminDb(): Firestore {
  return getFirestore(getFirebaseAdminApp());
}
